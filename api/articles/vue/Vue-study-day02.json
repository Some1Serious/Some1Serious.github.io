{"title":"Vue study day02","uid":"8eebcf296ee2c092bcde72c4fe313aa5","slug":"vue/Vue-study-day02","date":"2023-01-05T07:06:18.000Z","updated":"2023-01-05T08:30:56.653Z","comments":true,"path":"api/articles/vue/Vue-study-day02.json","keywords":null,"cover":"/img/VUE.jpeg","content":"<h2 id=\"Vue-操作Dom\"><a href=\"#Vue-操作Dom\" class=\"headerlink\" title=\"Vue 操作Dom\"></a>Vue 操作Dom</h2><p>通过<code>ref</code>回调的方式:</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;script type&#x3D;&quot;module&quot;&gt;\nimport &#123; createApp &#125; from &#39;vue&#39;\n\ncreateApp(&#123;\n  &#x2F;&#x2F; ...\n  mounted()&#123;\n    this.$refs.p.textContent &#x3D; &#39;123&#39;\n  &#125;\n  \n&#125;).mount(&#39;#app&#39;)\n&lt;&#x2F;script&gt;\n\n&lt;div id&#x3D;&quot;app&quot;&gt;\n  &lt;p ref&#x3D;&quot;p&quot;&gt;hello&lt;&#x2F;p&gt;\n&lt;&#x2F;div&gt;</code></pre>\n\n<p>如上面代码所示, ref表示<strong>p</strong>, 然后在creatApp中, 在mounted下, 通过这种方式修改他的textContent, 也就是他的dom属性之一</p>\n<hr>\n<h2 id=\"监听数据变化\"><a href=\"#监听数据变化\" class=\"headerlink\" title=\"监听数据变化\"></a>监听数据变化</h2><p>Vue有监听数据变化然后产生<strong>副作用</strong>的功能, 具体代码如下:</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;script type&#x3D;&quot;module&quot;&gt;\nimport &#123; createApp &#125; from &#39;vue&#39;\n\ncreateApp(&#123;\n  data() &#123;\n    return &#123;\n      todoId: 1,\n      todoData: null\n    &#125;\n  &#125;,\n  methods: &#123;\n    async fetchData() &#123;\n      this.todoData &#x3D; null\n      const res &#x3D; await fetch(\n        &#96;https:&#x2F;&#x2F;jsonplaceholder.typicode.com&#x2F;todos&#x2F;$&#123;this.todoId&#125;&#96;\n      )\n      this.todoData &#x3D; await res.json()\n    &#125;\n  &#125;,\n  \n  watch:&#123;\n    todoId(newId)&#123;\n      this.todoData.id &#x3D; newId\n    &#125;\n  &#125;,\n  \n  mounted() &#123;\n    this.fetchData()\n  &#125;\n&#125;).mount(&#39;#app&#39;)\n&lt;&#x2F;script&gt;\n\n&lt;div id&#x3D;&quot;app&quot;&gt;\n  &lt;p&gt;Todo id: &#123;&#123; todoId &#125;&#125;&lt;&#x2F;p&gt;\n  &lt;button @click&#x3D;&quot;todoId++&quot;&gt;Fetch next todo&lt;&#x2F;button&gt;\n  &lt;p v-if&#x3D;&quot;!todoData&quot;&gt;Loading...&lt;&#x2F;p&gt;\n  &lt;pre v-else&gt;&#123;&#123; todoData &#125;&#125;&lt;&#x2F;pre&gt;\n&lt;&#x2F;div&gt;</code></pre>\n\n<p>如上图的<code>watch:</code>, 它监听了todoId, 然后每次todoId发生改变之后, 他就会改变todoData.id.</p>\n<hr>\n<h2 id=\"导入组件\"><a href=\"#导入组件\" class=\"headerlink\" title=\"导入组件\"></a>导入组件</h2><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;script type&#x3D;&quot;module&quot;&gt;\nimport &#123; createApp &#125; from &#39;vue&#39;\nimport ChildComp from &#39;.&#x2F;ChildComp.js&#39;\ncreateApp(&#123;\n  &#x2F;&#x2F; register child component\n  components: &#123;\n   ChildComp\n  &#125;\n&#125;).mount(&#39;#app&#39;)\n&lt;&#x2F;script&gt;</code></pre>\n\n<p>先import组件, 然后在<code>components:</code>里面声明组件, 然后在html中使用, <strong>注意使用时应遵循html命名规则</strong></p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;div id&#x3D;&quot;app&quot;&gt;\n  &lt;child-comp&gt;&lt;&#x2F;child-comp&gt;\n  &lt;!-- render child component --&gt;\n&lt;&#x2F;div&gt;</code></pre>\n\n<hr>\n<h2 id=\"父向子传递数据\"><a href=\"#父向子传递数据\" class=\"headerlink\" title=\"父向子传递数据\"></a>父向子传递数据</h2><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;div id&#x3D;&quot;app&quot;&gt;\n  &lt;child-comp :msg&#x3D;&quot;greeting&quot;&gt;&lt;&#x2F;child-comp&gt;\n&lt;&#x2F;div&gt;</code></pre>\n\n<p>如上图, 注意, <code>greeting</code>已经在data里被定义过了, 然后在子组件中, 通过<code>prop</code>接受数据</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">export default &#123;\n  props: &#123;\n    msg: String\n  &#125;,\n  template: &#96;\n  &lt;h2&gt;&#123;&#123; msg || &#39;No props passed yet&#39; &#125;&#125;&lt;&#x2F;h2&gt;\n  &#96;\n&#125;</code></pre>\n\n","feature":false,"text":"Vue 操作Dom通过ref回调的方式: &lt;script type&#x3D;&quot;module&quot;&gt; import &#123; createApp &#125; from &#39;vue&#39; createApp(&#123; &#x2F;&#...","link":"","photos":[],"count_time":{"symbolsCount":"2.5k","symbolsTime":"2 mins."},"categories":[{"name":"Study","slug":"Study","count":21,"path":"api/categories/Study.json"}],"tags":[{"name":"Vue3.0","slug":"Vue3-0","count":1,"path":"api/tags/Vue3-0.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Vue-%E6%93%8D%E4%BD%9CDom\"><span class=\"toc-text\">Vue 操作Dom</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%9B%91%E5%90%AC%E6%95%B0%E6%8D%AE%E5%8F%98%E5%8C%96\"><span class=\"toc-text\">监听数据变化</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AF%BC%E5%85%A5%E7%BB%84%E4%BB%B6\"><span class=\"toc-text\">导入组件</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%88%B6%E5%90%91%E5%AD%90%E4%BC%A0%E9%80%92%E6%95%B0%E6%8D%AE\"><span class=\"toc-text\">父向子传递数据</span></a></li></ol>","author":{"name":"Someone Serious","slug":"blog-author","avatar":"/img/photo.jpg","link":"/","description":"here is someone serious <br />只是一个小学生, 学艺不精多多见谅","socials":{"github":"https://github.com/Some1Serious","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"QQ":{"icon":"/svg/QQ.svg","link":"/img/myQQ.png"},"Email":{"icon":"/svg/email-fill.svg","link":"mailto:1025698918@qq.com"}}}},"mapped":true,"prev_post":{"title":"","uid":"f73a8e23e6f6f669cf99c7dba8fa0722","slug":"vue/Vue-study-day03","date":"2023-01-17T09:50:48.096Z","updated":"2023-01-17T09:50:48.096Z","comments":true,"path":"api/articles/vue/Vue-study-day03.json","keywords":null,"cover":null,"text":"","link":"","photos":[],"count_time":{"symbolsCount":0,"symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"Someone Serious","slug":"blog-author","avatar":"/img/photo.jpg","link":"/","description":"here is someone serious <br />只是一个小学生, 学艺不精多多见谅","socials":{"github":"https://github.com/Some1Serious","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"QQ":{"icon":"/svg/QQ.svg","link":"/img/myQQ.png"},"Email":{"icon":"/svg/email-fill.svg","link":"mailto:1025698918@qq.com"}}}}},"next_post":{"title":"Ajax Study day03","uid":"3961be608d49dc29dafdd30815d4f1d9","slug":"vue/Ajax-Study-day03","date":"2022-12-03T10:59:16.000Z","updated":"2022-12-04T06:00:45.835Z","comments":true,"path":"api/articles/vue/Ajax-Study-day03.json","keywords":null,"cover":"/img/VUE.jpeg","text":"前言这个地方的技术实在是太乱了, 根本不好搞, 真的很烦. Ajax通过json返回请求JSON 是 JS 对象的字符串表示法，它使用文本表示一个 JS 对象的信息，本质是一个字符串。 const jsonStuff &#x3D; &#123; count: x, data: &...","link":"","photos":[],"count_time":{"symbolsCount":"5k","symbolsTime":"5 mins."},"categories":[{"name":"Study","slug":"Study","count":21,"path":"api/categories/Study.json"}],"tags":[{"name":"Ajax","slug":"Ajax","count":3,"path":"api/tags/Ajax.json"}],"author":{"name":"Someone Serious","slug":"blog-author","avatar":"/img/photo.jpg","link":"/","description":"here is someone serious <br />只是一个小学生, 学艺不精多多见谅","socials":{"github":"https://github.com/Some1Serious","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"QQ":{"icon":"/svg/QQ.svg","link":"/img/myQQ.png"},"Email":{"icon":"/svg/email-fill.svg","link":"mailto:1025698918@qq.com"}}}},"feature":false}}