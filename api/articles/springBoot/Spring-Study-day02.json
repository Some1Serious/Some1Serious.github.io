{"title":"Spring Study day02","uid":"d8446112450bdc11bfa73254c1a2fc8c","slug":"springBoot/Spring-Study-day02","date":"2022-11-13T02:10:54.000Z","updated":"2022-11-15T11:43:01.719Z","comments":true,"path":"api/articles/springBoot/Spring-Study-day02.json","keywords":null,"cover":"/img/spring_01.png","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>今天是周末, 又是学习的一天, 从早学到晚, 感觉自己的腰椎要顶不住了. (；へ：)</p>\n<h2 id=\"承接上文的xml配置\"><a href=\"#承接上文的xml配置\" class=\"headerlink\" title=\"承接上文的xml配置\"></a>承接上文的xml配置</h2><h3 id=\"对数组进行赋值\"><a href=\"#对数组进行赋值\" class=\"headerlink\" title=\"对数组进行赋值\"></a>对数组进行赋值</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">private List&lt;String&gt; list;   &#x2F;&#x2F;注意这里是List 不是ArrayList\n\nprivate other o;\n\npublic User(int x, String str, List&lt;String&gt; list, other o) &#123; &#x2F;&#x2F;注意这里也是List, 不是ArrayList\n    this.x &#x3D; x;\n    this.str &#x3D; str;\n    this.list &#x3D; list;\n    this.o &#x3D; o;\n&#125;</code></pre>\n\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;bean id&#x3D;&quot;user&quot; class&#x3D;&quot;com.myCompany.helloWorld.User&quot;&gt;\n    &lt;constructor-arg name&#x3D;&quot;o&quot; ref&#x3D;&quot;s&quot;&#x2F;&gt;\n\n    &lt;constructor-arg name&#x3D;&quot;str&quot; value&#x3D;&quot;&lt;String&quot;&quot;&#x2F;&gt;\n\n    &lt;constructor-arg name&#x3D;&quot;x&quot; value&#x3D;&quot;123&quot;&#x2F;&gt;\n    &lt;constructor-arg name&#x3D;&quot;list&quot;&gt;\n\n        &lt;list&gt;\n            &lt;value&gt;abc&lt;&#x2F;value&gt;\n            &lt;value&gt;def&lt;&#x2F;value&gt;\n            &lt;value&gt;ijn&lt;&#x2F;value&gt;\n            &lt;value&gt;mkl&lt;&#x2F;value&gt;\n        &lt;&#x2F;list&gt;\n\n    &lt;&#x2F;constructor-arg&gt;\n&lt;&#x2F;bean&gt;</code></pre>\n\n<div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">提示</p>\n<p><p>List与ArrayList的区别</p>\n<p>ArrayList是List的实现类, List只是一个接口. 所以下面的代码可以实现:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">List list &#x3D; new List();&#x2F;&#x2F;报错\nList list &#x3D; new ArrayList();&#x2F;&#x2F;正确</code></pre>\n\n</p>\n</div>\n<h3 id=\"集合和字典\"><a href=\"#集合和字典\" class=\"headerlink\" title=\"集合和字典:\"></a>集合和字典:</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">private Map&lt;String, String&gt; map;\nprivate Set&lt;String&gt; set;</code></pre>\n\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;constructor-arg name&#x3D;&quot;map&quot;&gt;  &lt;!--换成property都是一样的---&gt;\n\n    &lt;map&gt;\n        &lt;entry key&#x3D;&quot;张三&quot; value&#x3D;&quot;zhangsan&quot;&#x2F;&gt;\n        &lt;entry key&#x3D;&quot;李四&quot; value&#x3D;&quot;lisi&quot;&#x2F;&gt;\n    &lt;&#x2F;map&gt;\n\n&lt;&#x2F;constructor-arg&gt;\n\n&lt;constructor-arg name&#x3D;&quot;set&quot;&gt;\n\n    &lt;set&gt;\n        &lt;value&gt;张三&lt;&#x2F;value&gt;\n        &lt;value&gt;李四&lt;&#x2F;value&gt;\n        &lt;value&gt;王五&lt;&#x2F;value&gt;\n        &lt;value&gt;赵六&lt;&#x2F;value&gt;\n    &lt;&#x2F;set&gt;\n\n&lt;&#x2F;constructor-arg&gt;</code></pre>\n\n<div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">提示</p>\n<p><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">System.out.println(Arrays.toString(list)); &#x2F;&#x2F; 注意里面放的是数组, 不是List, 这个方法可以快速格式化输出数组</code></pre>\n\n</p>\n</div>\n<h3 id=\"注入对象类型值\"><a href=\"#注入对象类型值\" class=\"headerlink\" title=\"注入对象类型值\"></a>注入对象类型值</h3><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;entry key-ref&#x3D;&quot;test&quot; value&#x3D;&quot;zhangsan&quot;&gt;&lt;&#x2F;entry&gt;</code></pre>\n\n<p>其他同理</p>\n<h3 id=\"通过util产生公共的对象-然后引用\"><a href=\"#通过util产生公共的对象-然后引用\" class=\"headerlink\" title=\"通过util产生公共的对象, 然后引用\"></a>通过util产生公共的对象, 然后引用</h3><p>首先要改变xml</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;\n       xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;\n       xmlns:util&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;util&quot; \n       xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans.xsd\n                           http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;util http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;util&#x2F;spring-util.xsd&quot;&gt;</code></pre>\n\n<p>注意上面的xmlns:util是新的添加, 还有在xsi上面新加的链接,</p>\n<p>声明公共的对象</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;util:list id&#x3D;&quot;list&quot;&gt;\n    &lt;value&gt;张三&lt;&#x2F;value&gt;\n    &lt;value&gt;李四&lt;&#x2F;value&gt;\n    &lt;value&gt;王五&lt;&#x2F;value&gt;\n    &lt;value&gt;赵六&lt;&#x2F;value&gt;\n&lt;&#x2F;util:list&gt;</code></pre>\n\n<p>然后其他对象可以通过ref引入</p>\n<div class=\"custom-quote warning\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12 8V13\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12 15.99V16.01\"></path>\n</svg>\n</span>\n<p class=\"custom-quote-title\">注意</p>\n<p>这里的引入引入的都是同一个对象, 地址一致</p>\n\n</div>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;bean id&#x3D;&quot;user&quot; class&#x3D;&quot;com.myCompany.helloWorld.User&quot;&gt;\n    &lt;constructor-arg name&#x3D;&quot;list&quot; ref&#x3D;&quot;list&quot;&#x2F;&gt;\n    &lt;constructor-arg name&#x3D;&quot;list2&quot; ref&#x3D;&quot;list&quot;&#x2F;&gt;\n&lt;&#x2F;bean&gt;</code></pre>\n\n\n\n<h3 id=\"factoryBean与普通bean\"><a href=\"#factoryBean与普通bean\" class=\"headerlink\" title=\"factoryBean与普通bean\"></a>factoryBean与普通bean</h3><p>factoryBean返回类型是可自定义的, 只要引用<code>FactoryBean</code>的接口, 重写<code>getObject()</code>就可以实现, 但是我估计用不到, 所以就不详细展开了. </p>\n<h3 id=\"单实例与多实例\"><a href=\"#单实例与多实例\" class=\"headerlink\" title=\"单实例与多实例\"></a>单实例与多实例</h3><div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">提示</p>\n<p><p>单实例的意思就是, 只有一个实例, 多个人引用的是同一个对象, 地址是一致的, 多实例就是每次引用创建一个新的对象, 地址之间不一致</p>\n</p>\n</div>\n<p>设置单实例与多实例:</p>\n<p>系统默认是单实例</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Test\npublic void test()&#123;\n\n    ApplicationContext applicationContext &#x3D; new ClassPathXmlApplicationContext(&quot;bean1.xml&quot;);\n\n    User user1 &#x3D; applicationContext.getBean(&quot;user&quot;, User.class);\n    User user2 &#x3D; applicationContext.getBean(&quot;user&quot;, User.class);\n    System.out.println(user1);\n    System.out.println(user2);\n\n\n&#125;</code></pre>\n\n<p>结果:</p>\n<pre class=\"line-numbers language-text\" data-language=\"text\"><code class=\"language-text\">com.myCompany.helloWorld.User@1cab0bfb\ncom.myCompany.helloWorld.User@1cab0bfb\n\n进程已结束,退出代码0</code></pre>\n\n<p>注意上面的结果, 地址值是一样的.</p>\n<p>设置多实例:</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;!--    &lt;bean id&#x3D;&quot;user&quot; class&#x3D;&quot;com.myCompany.helloWorld.User&quot; scope&#x3D;&quot;singleton&quot;&gt;--&gt;\n    &lt;bean id&#x3D;&quot;user&quot; class&#x3D;&quot;com.myCompany.helloWorld.User&quot; scope&#x3D;&quot;prototype&quot;&gt;\n        &lt;constructor-arg name&#x3D;&quot;list&quot; ref&#x3D;&quot;list&quot;&#x2F;&gt;\n        &lt;constructor-arg name&#x3D;&quot;list2&quot; ref&#x3D;&quot;list&quot;&#x2F;&gt;\n    &lt;&#x2F;bean&gt;</code></pre>\n\n<p>设置scope, 默认值是<code>singleton</code>,意思是单实例, 设置为<code>prototype</code>,多实例.</p>\n<h3 id=\"bean的生命周期\"><a href=\"#bean的生命周期\" class=\"headerlink\" title=\"bean的生命周期\"></a>bean的生命周期</h3><ol>\n<li><p>初始化(执行构造方法)</p>\n</li>\n<li><p>调用set方法</p>\n</li>\n<li><p>调用初始化方法(如下面代码的<code>init-method</code>)</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;bean id&#x3D;&quot;user&quot; class&#x3D;&quot;com.myCompany.helloWorld.User&quot; scope&#x3D;&quot;prototype&quot; init-method&#x3D;&quot;helloWorld&quot;&gt;\n    &lt;constructor-arg name&#x3D;&quot;list&quot; ref&#x3D;&quot;list&quot;&#x2F;&gt;\n    &lt;constructor-arg name&#x3D;&quot;list2&quot; ref&#x3D;&quot;list&quot;&#x2F;&gt;\n&lt;&#x2F;bean&gt;</code></pre>\n</li>\n<li><p>bean实例获取, 就是:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">User user1 &#x3D; applicationContext.getBean(&quot;user&quot;, User.class);</code></pre>\n</li>\n<li><p>销毁, 销毁的不是某一个bean, 而是整个xml配置实例,销毁代码:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">ApplicationContext applicationContext &#x3D; new ClassPathXmlApplicationContext(&quot;bean1.xml&quot;);\n((ClassPathXmlApplicationContext)applicationContext).close();</code></pre>\n\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;bean id&#x3D;&quot;user2&quot; class&#x3D;&quot;com.myCompany.helloWorld.User2&quot; scope&#x3D;&quot;singleton&quot; destroy-method&#x3D;&quot;destroy&quot;&#x2F;&gt;</code></pre>\n\n<p>注意上面代码的<code>destroy-method</code>, 就是销毁会调用的方法</p>\n</li>\n</ol>\n<div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">提示</p>\n<p>然而在多实例的bean中, destroy方法并不会被调用, 将bean销毁之后, 不会影响到它已经产生的类. 单实例的bean是在xml被实例化时候被创建的, 而多实例的bean是在被具体实例化时被创建的, 所以即使没有只创建的关于xml的实例化, 没有创建类的实例化, xml中的单实例类的初始化方法仍然会被调用, 而多实例则不会</p>\n\n</div>\n<h3 id=\"bean属性自动注入\"><a href=\"#bean属性自动注入\" class=\"headerlink\" title=\"bean属性自动注入\"></a>bean属性自动注入</h3><p>通过<code>autowire</code>的方式, 但是我们用不到. 百度再说</p>\n<h2 id=\"德鲁伊连接池\"><a href=\"#德鲁伊连接池\" class=\"headerlink\" title=\"德鲁伊连接池\"></a>德鲁伊连接池</h2><p>首先在maven中导入</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;dependency&gt;\n  &lt;groupId&gt;com.alibaba&lt;&#x2F;groupId&gt;\n  &lt;artifactId&gt;druid&lt;&#x2F;artifactId&gt;\n  &lt;version&gt;1.2.4&lt;&#x2F;version&gt;\n&lt;&#x2F;dependency&gt;</code></pre>\n\n<p>然后在配置文件中更改:</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;\n       xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;\n       xmlns:context&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&quot;\n\n       xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans.xsd\n                           http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context  http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&#x2F;spring-context.xsd&quot;&gt;\n\n\n    &lt;context:property-placeholder location&#x3D;&quot;jdbc.properties&quot;&#x2F;&gt;</code></pre>\n\n<p>注意前面的xmlns与xsi中的更改, 在<code>location</code>中填写**.properties**文件</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;bean id&#x3D;&quot;user&quot; class&#x3D;&quot;com.myCompany.helloWorld.User&quot; scope&#x3D;&quot;prototype&quot;&gt;\n    &lt;property name&#x3D;&quot;x1&quot; value&#x3D;&quot;$&#123;prop.x1&#125;&quot;&#x2F;&gt;\n    &lt;property name&#x3D;&quot;x2&quot; value&#x3D;&quot;$&#123;prop.x2&#125;&quot;&#x2F;&gt;\n    &lt;property name&#x3D;&quot;x3&quot; value&#x3D;&quot;$&#123;prop.x3&#125;&quot;&#x2F;&gt;\n&lt;&#x2F;bean&gt;</code></pre>\n\n<p>下面是properties文件, 这个文件我放在了和xml文件一样的resouces文件夹下. </p>\n<div class=\"custom-quote warning\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12 8V13\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12 15.99V16.01\"></path>\n</svg>\n</span>\n<p class=\"custom-quote-title\">注意</p>\n<p><p>等号后面不要用空格</p>\n</p>\n</div>\n<pre class=\"line-numbers language-properties\" data-language=\"properties\"><code class=\"language-properties\">prop.x1&#x3D;123\nprop.x2&#x3D;456\nprop.x3&#x3D;789</code></pre>\n\n\n\n<h2 id=\"注解方式管理Bean\"><a href=\"#注解方式管理Bean\" class=\"headerlink\" title=\"注解方式管理Bean\"></a>注解方式管理Bean</h2><p>注解需要<code>aop</code>的包, 我们通过maven引入</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;dependency&gt;\n  &lt;groupId&gt;org.springframework&lt;&#x2F;groupId&gt;\n  &lt;artifactId&gt;spring-aop&lt;&#x2F;artifactId&gt;\n  &lt;version&gt;5.3.23&lt;&#x2F;version&gt;\n&lt;&#x2F;dependency&gt;</code></pre>\n\n<p>注解方式开启需要<strong>组件扫描</strong>, 在xml配置文件中, 我们仍然要引入context. 然后开启组件扫描:</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;context:component-scan base-package&#x3D;&quot;com.myCompany&quot;&#x2F;&gt;</code></pre>\n\n<div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">提示</p>\n<p>在包路径里, 只写上层路径的意思是, 下层路径全部扫描, 如果想扫描多个包, 可以后面跟逗号, 注意: 逗号后面的路径也是全路径. </p>\n\n</div>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;&#x2F; 下面是注解的写法, 有四种@, 其实意思都一样, 只不过每一种@用在项目中的不同结构上, \n&#x2F;&#x2F; value就是唯一标识的id, 如果不写, 默认值就是类名, 但是首字母会小写\n\n@Component(value &#x3D; &quot;user&quot;)\n&#x2F;&#x2F;@Service\n&#x2F;&#x2F;@Controller\n&#x2F;&#x2F;@Repository\npublic class User &#123;\n\n    String x1;\n    public void helloWorld() &#123;\n\n        System.out.println(&quot;创建User成功&quot;);\n        System.out.println(x1);\n    &#125;\n\n    public void theEnd()&#123;\n        System.out.println(&quot;销毁User成功&quot;);\n    &#125;\n&#125;</code></pre>\n\n\n\n<p>我觉得我有可能会做一个技术汇总, 就是写完这些混沌的知识之后, 总结出一股子脉络, 进项详细的排序, 但是感觉工作量有点大, 估计得等到我之后已经遗忘掉spring知识的时候我才会做一个基于博客的学习博客吧.标签我已经想好了, 就叫<code>studyAgain</code></p>\n<h3 id=\"关于context的扫描细节配置\"><a href=\"#关于context的扫描细节配置\" class=\"headerlink\" title=\"关于context的扫描细节配置\"></a>关于context的扫描细节配置</h3><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;!--    use-default-filters默认为true, 表示意思是全部自动扫描, 选择false就表示不扫描, --&gt;\n&lt;!--    context:include-filter表示添加扫描文件, 后面的Controller表示只扫描@Controller的类\n        context:exclude-filter 和上面的相反, 表示不扫描什么东西--&gt;\n&lt;!--        这个type&#x3D;&quot;annotation&quot;表示的就是关于注释的处理--&gt;\n    &lt;context:component-scan base-package&#x3D;&quot;com.myCompany&quot; use-default-filters&#x3D;&quot;false&quot;&gt;\n        &lt;context:include-filter type&#x3D;&quot;annotation&quot; expression&#x3D;&quot;org.springframework.stereotype.Component&quot;&#x2F;&gt;\n        &lt;context:exclude-filter type&#x3D;&quot;annotation&quot; expression&#x3D;&quot;org.springframework.stereotype.Service&quot;&#x2F;&gt;\n    &lt;&#x2F;context:component-scan&gt;</code></pre>\n\n\n\n<h3 id=\"注释的注入\"><a href=\"#注释的注入\" class=\"headerlink\" title=\"注释的注入\"></a>注释的注入</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Value(value &#x3D; &quot;String x1&quot;)\nString x1;\n\n@Autowired\t&#x2F;&#x2F;表示通过类型自动注入, 但是如果一个类型接口下有多个类就会报错\n@Qualifier(value &#x3D; &quot;other&quot;)  &#x2F;&#x2F;通过id注入, 注意:在被注入的类前记得加@, 让context扫描到这个类, 这两个@一般连用, 虽然我也不知道为什么不能只用@Qualifier\nOther o;</code></pre>\n\n<div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">提示</p>\n<p><p>@Repository可以通过类型和id进行注入, 但是它是java的扩展包中的内容, 而不是spring中的内容, 所以不推荐使用</p>\n</p>\n</div>\n<h3 id=\"完全注解开发\"><a href=\"#完全注解开发\" class=\"headerlink\" title=\"完全注解开发\"></a>完全注解开发</h3><p>可以完全使用注解而不使用xml文件进行开发, 到这里我们的Spring的IOC就学完啦</p>\n<p>我试试能不能跳转到SpringBoot学习.</p>\n","feature":false,"text":"前言今天是周末, 又是学习的一天, 从早学到晚, 感觉自己的腰椎要顶不住了. (；へ：) 承接上文的xml配置对数组进行赋值private List&lt;String&gt; list; &#x2F;&#x2F;注意这里是List 不是ArrayList private oth...","link":"","photos":[],"count_time":{"symbolsCount":"9.6k","symbolsTime":"9 mins."},"categories":[{"name":"Study","slug":"Study","count":21,"path":"api/categories/Study.json"}],"tags":[{"name":"Spring","slug":"Spring","count":2,"path":"api/tags/Spring.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%89%8D%E8%A8%80\"><span class=\"toc-text\">前言</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%89%BF%E6%8E%A5%E4%B8%8A%E6%96%87%E7%9A%84xml%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">承接上文的xml配置</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AF%B9%E6%95%B0%E7%BB%84%E8%BF%9B%E8%A1%8C%E8%B5%8B%E5%80%BC\"><span class=\"toc-text\">对数组进行赋值</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%9B%86%E5%90%88%E5%92%8C%E5%AD%97%E5%85%B8\"><span class=\"toc-text\">集合和字典:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B3%A8%E5%85%A5%E5%AF%B9%E8%B1%A1%E7%B1%BB%E5%9E%8B%E5%80%BC\"><span class=\"toc-text\">注入对象类型值</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%80%9A%E8%BF%87util%E4%BA%A7%E7%94%9F%E5%85%AC%E5%85%B1%E7%9A%84%E5%AF%B9%E8%B1%A1-%E7%84%B6%E5%90%8E%E5%BC%95%E7%94%A8\"><span class=\"toc-text\">通过util产生公共的对象, 然后引用</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#factoryBean%E4%B8%8E%E6%99%AE%E9%80%9Abean\"><span class=\"toc-text\">factoryBean与普通bean</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8D%95%E5%AE%9E%E4%BE%8B%E4%B8%8E%E5%A4%9A%E5%AE%9E%E4%BE%8B\"><span class=\"toc-text\">单实例与多实例</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#bean%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F\"><span class=\"toc-text\">bean的生命周期</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#bean%E5%B1%9E%E6%80%A7%E8%87%AA%E5%8A%A8%E6%B3%A8%E5%85%A5\"><span class=\"toc-text\">bean属性自动注入</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%BE%B7%E9%B2%81%E4%BC%8A%E8%BF%9E%E6%8E%A5%E6%B1%A0\"><span class=\"toc-text\">德鲁伊连接池</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%B3%A8%E8%A7%A3%E6%96%B9%E5%BC%8F%E7%AE%A1%E7%90%86Bean\"><span class=\"toc-text\">注解方式管理Bean</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%85%B3%E4%BA%8Econtext%E7%9A%84%E6%89%AB%E6%8F%8F%E7%BB%86%E8%8A%82%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">关于context的扫描细节配置</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B3%A8%E9%87%8A%E7%9A%84%E6%B3%A8%E5%85%A5\"><span class=\"toc-text\">注释的注入</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%8C%E5%85%A8%E6%B3%A8%E8%A7%A3%E5%BC%80%E5%8F%91\"><span class=\"toc-text\">完全注解开发</span></a></li></ol></li></ol>","author":{"name":"Someone Serious","slug":"blog-author","avatar":"/img/photo.jpg","link":"/","description":"here is someone serious <br />只是一个小学生, 学艺不精多多见谅","socials":{"github":"https://github.com/Some1Serious","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"QQ":{"icon":"/svg/QQ.svg","link":"/img/myQQ.png"},"Email":{"icon":"/svg/email-fill.svg","link":"mailto:1025698918@qq.com"}}}},"mapped":true,"prev_post":{"title":"Java web Study day01","uid":"a87786c9ccb2deebec2cb0b25e4021c7","slug":"javaWeb/Java-web-Study-day01","date":"2022-11-13T10:49:34.000Z","updated":"2022-11-21T05:21:38.172Z","comments":true,"path":"api/articles/javaWeb/Java-web-Study-day01.json","keywords":null,"cover":"/img/javaWeb.png","text":"黑马程序员新版JavaWeb基础教程，Java web从入门到企业实战完整版_哔哩哔哩_bilibili 喂喂喂听得到吗! 今天想看电影, 没人陪我看, 真tmd, 我感觉要学的东西快学不完了, G! 我的mysql的服务器创建了, 账号为root, 密码为S 不行了, 洗个衣服...","link":"","photos":[],"count_time":{"symbolsCount":"2.4k","symbolsTime":"2 mins."},"categories":[{"name":"Study","slug":"Study","count":21,"path":"api/categories/Study.json"}],"tags":[{"name":"javaWeb","slug":"javaWeb","count":5,"path":"api/tags/javaWeb.json"},{"name":"jsp","slug":"jsp","count":1,"path":"api/tags/jsp.json"}],"author":{"name":"Someone Serious","slug":"blog-author","avatar":"/img/photo.jpg","link":"/","description":"here is someone serious <br />只是一个小学生, 学艺不精多多见谅","socials":{"github":"https://github.com/Some1Serious","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"QQ":{"icon":"/svg/QQ.svg","link":"/img/myQQ.png"},"Email":{"icon":"/svg/email-fill.svg","link":"mailto:1025698918@qq.com"}}}},"feature":false},"next_post":{"title":"Spring Study day01","uid":"f9ae6417e6d1f674d9c49adb056f5b6c","slug":"springBoot/Spring-Study-day01","date":"2022-11-12T06:33:30.000Z","updated":"2022-11-15T11:42:57.375Z","comments":true,"path":"api/articles/springBoot/Spring-Study-day01.json","keywords":null,"cover":"/img/spring_01.png","text":"学习传送门 首先明确: spring是为了使项目更加简便而设计的 提示 GA版本是稳定版 SNAPSHOT是快照版 Spring项目的创建使用maven, 先创建一个最基本的spring框架: 写一个类的方法 package com.myCompany.helloWorld; i...","link":"","photos":[],"count_time":{"symbolsCount":"5.4k","symbolsTime":"5 mins."},"categories":[{"name":"Study","slug":"Study","count":21,"path":"api/categories/Study.json"}],"tags":[{"name":"Spring","slug":"Spring","count":2,"path":"api/tags/Spring.json"}],"author":{"name":"Someone Serious","slug":"blog-author","avatar":"/img/photo.jpg","link":"/","description":"here is someone serious <br />只是一个小学生, 学艺不精多多见谅","socials":{"github":"https://github.com/Some1Serious","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"QQ":{"icon":"/svg/QQ.svg","link":"/img/myQQ.png"},"Email":{"icon":"/svg/email-fill.svg","link":"mailto:1025698918@qq.com"}}}},"feature":false}}