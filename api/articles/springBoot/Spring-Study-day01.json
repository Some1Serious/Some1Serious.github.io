{"title":"Spring Study day01","uid":"f9ae6417e6d1f674d9c49adb056f5b6c","slug":"springBoot/Spring-Study-day01","date":"2022-11-12T06:33:30.000Z","updated":"2022-11-15T11:42:57.375Z","comments":true,"path":"api/articles/springBoot/Spring-Study-day01.json","keywords":null,"cover":"/img/spring_01.png","content":"<p><a href=\"https://www.bilibili.com/video/BV1Vf4y127N5/?spm_id_from=333.337.search-card.all.click&vd_source=79f488fa065eee08ba72fa4d2ffc9a26\">学习传送门</a></p>\n<p>首先明确: <strong>spring是为了使项目更加简便而设计的</strong></p>\n<div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">提示</p>\n<p><p>GA版本是稳定版</p>\n<p>SNAPSHOT是快照版</p>\n</p>\n</div>\n<h2 id=\"Spring项目的创建\"><a href=\"#Spring项目的创建\" class=\"headerlink\" title=\"Spring项目的创建\"></a>Spring项目的创建</h2><p>使用maven, 先创建一个最基本的spring框架:<br><img src=\"/post/springBoot/Spring-Study-day01/image-20221112164150928.png\" alt=\"image-20221112164150928\"></p>\n<p>写一个类的方法</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package com.myCompany.helloWorld;\n\nimport javax.xml.bind.annotation.adapters.XmlJavaTypeAdapters;\nimport java.sql.SQLOutput;\nimport org.junit.Test;\n\npublic class User &#123;\n\n    public void helloWorld()&#123;\n        System.out.println(&quot;helloWorld&quot;);\n    &#125;\n\n&#125;</code></pre>\n\n<p>写一个测试类</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package com.myCompany.helloWorld;\n\nimport org.junit.Test;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\n\npublic class TestRun &#123;\n\n    @Test\n    public void test()&#123;\n\n        ApplicationContext applicationContext &#x3D; new ClassPathXmlApplicationContext(&quot;bean1.xml&quot;);\n\n        User user &#x3D; applicationContext.getBean(&quot;user&quot;, User.class);\n        System.out.println(user);\n        user.helloWorld();\n\n    &#125;\n\n&#125;</code></pre>\n\n<p><img src=\"/post/springBoot/Spring-Study-day01/image-20221112172239987.png\" alt=\"image-20221112172239987\"></p>\n<p>在main下创建一个resources资源文件夹, 存放xml文件, 在xml文件中创建bean</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;\n       xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;\n       xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans.xsd&quot;&gt;\n\n    &lt;bean id&#x3D;&quot;user&quot; class&#x3D;&quot;com.myCompany.helloWorld.User&quot;&gt;&lt;&#x2F;bean&gt;\n&lt;&#x2F;beans&gt;</code></pre>\n\n<p>然后运行测试类就可以了</p>\n<p>洗澡去了, 人要馊掉了</p>\n<hr>\n<h2 id=\"IOC容器\"><a href=\"#IOC容器\" class=\"headerlink\" title=\"IOC容器\"></a>IOC容器</h2><p>降低耦合, 将创建新的实体类的任务交给spring, 就是IOC, 上面的实践就是IOC</p>\n<p>它包括:</p>\n<pre><code>1. xml解析\n1. 工厂模式\n1. 反射\n</code></pre>\n<h3 id=\"反射\"><a href=\"#反射\" class=\"headerlink\" title=\"反射\"></a>反射</h3><p>内容不一定和反射有关, 毕竟这也不是什么专业报告, 而是我的学习日记</p>\n<p>java关于类的初始化:</p>\n<p>类并不是在java项目启动时就全部初始化的, 而是动态的, 在调用到它时才初始化, 初始化便是将类方法中的所有静态的方法启动(构造方法当然也算静态方法, 即使它没有<code>static</code>关键字)</p>\n<p>看下面的代码:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class Initable &#123;  \n    static final int staticFinal &#x3D; 47;  \n    static final int staticFianl2 &#x3D; ClassInitialization.rand.nextInt(1000); \n    static int notFinal &#x3D; 12;\n    static &#123;  \n        System.out.println(&quot;Initializing Initable&quot;);  \n    &#125;  \n&#125;</code></pre>\n\n<p>像<code>staticFinal</code>属于<strong>编译期常量</strong>, 调用它不需要将类初始化, <strong>注意, 必须要有final成为常量</strong></p>\n<p>像第二三种就必须要初始化才可以调用了, 一旦初始化, <strong>就会启动最后的打印方法</strong></p>\n<p>而调用<code>class.forName</code>可以主动将类加载到内存中 , 主动初始化. </p>\n<p><img src=\"/post/springBoot/Spring-Study-day01/image-20221112201523973.png\" alt=\"image-20221112201523973\"></p>\n<h3 id=\"IOC接口\"><a href=\"#IOC接口\" class=\"headerlink\" title=\"IOC接口\"></a>IOC接口</h3><ol>\n<li><code>BeanFactory</code>: IOC开发人员用的底层的, 功能更少, 咱们最好不要用</li>\n<li><code>ApplicationContext</code>: 给你用的, 用就完事了.</li>\n</ol>\n<div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">提示</p>\n<p>ctrl + h 可以打开类的关系图</p>\n\n</div>\n<p><img src=\"/post/springBoot/Spring-Study-day01/image-20221112210726416.png\" alt=\"image-20221112210726416\"></p>\n<p>这两个方法都可以得到创建xml对象</p>\n<p><code>FileSystemXmlApplicationContext</code>输入的是绝对路径</p>\n<p><code>ClassPathXmlApplicationContext</code>输入的是在src下的相对路劲, 但是我这里好像有点问题, 建议是在main下, 建立一个resouces文件夹, 这个方法也可以直接导航到该目录下</p>\n<h3 id=\"创建对象之后的注入属性\"><a href=\"#创建对象之后的注入属性\" class=\"headerlink\" title=\"创建对象之后的注入属性\"></a>创建对象之后的注入属性</h3><h4 id=\"xml配置无参构造set的方法\"><a href=\"#xml配置无参构造set的方法\" class=\"headerlink\" title=\"xml配置无参构造set的方法:\"></a>xml配置无参构造set的方法:</h4><p>创建一个类:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class User &#123;\n\n    private int x;\n    private String str;\n\n    private other o;\n\n    public void setO(other o) &#123;\n        this.o &#x3D; o;\n    &#125;\n\n    public void setX(int x) &#123;\n        this.x &#x3D; x;\n    &#125;\n\n    public void setStr(String str) &#123;\n        this.str &#x3D; str;\n    &#125;\n\n    public void helloWorld()&#123;\n        System.out.println(&quot;helloWorld int x &#x3D; &quot; + x + &quot;, str &#x3D; &quot; + str);\n        System.out.println(&quot;the other class : &quot; + o);\n        System.out.println(x + 1);\n    &#125;\n\n\n&#125;</code></pre>\n\n<p>他的配置文件 </p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">    &lt;bean id&#x3D;&quot;s&quot; class&#x3D;&quot;com.myCompany.helloWorld.other&quot;&#x2F;&gt;\n    &lt;bean id&#x3D;&quot;user&quot; class&#x3D;&quot;com.myCompany.helloWorld.User&quot;&gt;\n        &lt;property name&#x3D;&quot;x&quot; value&#x3D;&quot;1&quot;&#x2F;&gt;\n        &lt;property name&#x3D;&quot;str&quot; value&#x3D;&quot;str&quot;&#x2F;&gt;\n\n\n&lt;!--        这里引用了s类, 用ref的方法.--&gt;\n        &lt;property name&#x3D;&quot;o&quot; ref&#x3D;&quot;s&quot;&#x2F;&gt;\n    &lt;&#x2F;bean&gt;</code></pre>\n\n<h4 id=\"有参构造的xml方法\"><a href=\"#有参构造的xml方法\" class=\"headerlink\" title=\"有参构造的xml方法:\"></a>有参构造的xml方法:</h4><p>类文件:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class User &#123;\n\n    private int x;\n    private String str;\n\n    private other o;\n\n    public User(int x, String str, other o) &#123;\n        this.x &#x3D; x;\n        this.str &#x3D; str;\n        this.o &#x3D; o;\n    &#125;\n\n    public void helloWorld()&#123;\n        System.out.println(&quot;helloWorld int x &#x3D; &quot; + x + &quot;, str &#x3D; &quot; + str);\n        System.out.println(&quot;the other class : &quot; + o);\n        System.out.println(x + 1);\n    &#125;\n\n\n&#125;</code></pre>\n\n<p>配置文件:</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;!--    注意这里创建了一个s类--&gt;\n    &lt;bean id&#x3D;&quot;s&quot; class&#x3D;&quot;com.myCompany.helloWorld.other&quot;&#x2F;&gt;\n    &lt;bean id&#x3D;&quot;user&quot; class&#x3D;&quot;com.myCompany.helloWorld.User&quot;&gt;\n        &lt;constructor-arg name&#x3D;&quot;o&quot; ref&#x3D;&quot;s&quot;&#x2F;&gt;\n        &lt;constructor-arg name&#x3D;&quot;str&quot; value&#x3D;&quot;string&quot;&#x2F;&gt;\n        &lt;constructor-arg name&#x3D;&quot;x&quot; value&#x3D;&quot;123&quot;&#x2F;&gt;\n    &lt;&#x2F;bean&gt;</code></pre>\n\n<h4 id=\"p方式注入\"><a href=\"#p方式注入\" class=\"headerlink\" title=\"p方式注入\"></a>p方式注入</h4><p>我就提个名字, 想用的话百度吧. </p>\n<h4 id=\"配置文件特殊用法\"><a href=\"#配置文件特殊用法\" class=\"headerlink\" title=\"配置文件特殊用法\"></a>配置文件特殊用法</h4><ol>\n<li><p>设置空值</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;constructor-arg name&#x3D;&quot;str&quot;&gt;\n    &lt;null&#x2F;&gt;\n&lt;&#x2F;constructor-arg&gt;</code></pre>\n\n<p>用<code>property</code>同理</p>\n</li>\n<li><p>如果遇到xml会解析到的特殊符号怎么办, 比如<code>&lt;&gt;</code>,可以用转义符号<code>&amp;lt</code>, <code>&amp;gt</code>为&lt;&gt;</p>\n<p><code>&amp;quot</code>为”</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;constructor-arg name&#x3D;&quot;str&quot; &gt;\n    &lt;!--字符串写在&quot;CDATA[&quot;后--&gt;   \n    &lt;value&gt;&lt;![CDATA[&lt;String&gt;]]&gt;&lt;&#x2F;value&gt;\n&lt;&#x2F;constructor-arg&gt;</code></pre>\n</li>\n<li><p>使用内部bean赋值</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;constructor-arg name&#x3D;&quot;str&quot; &gt;\n    &lt;bean id &#x3D; &quot;&quot; class &#x3D; &quot;&quot;&gt;\n    &lt;!--进行内部bean的赋值, property同理--&gt;\n    &lt;&#x2F;bean&gt;\n&lt;&#x2F;constructor-arg&gt;</code></pre>\n</li>\n<li><p>级联赋值</p>\n<p>其实就是通过<code>ref</code>调用外部bean.</p>\n</li>\n</ol>\n<h3 id=\"IOC与DI\"><a href=\"#IOC与DI\" class=\"headerlink\" title=\"IOC与DI\"></a><a href=\"https://blog.csdn.net/ji1127780204/article/details/80291266\">IOC与DI</a></h3><h2 id=\"TheEND\"><a href=\"#TheEND\" class=\"headerlink\" title=\"TheEND\"></a>TheEND</h2><p>好啦, 今天的学习时光就到这里了, 下午两点半创建的文档, 现在已经是11点47了, 好啦886.</p>\n","feature":false,"text":"学习传送门 首先明确: spring是为了使项目更加简便而设计的 提示 GA版本是稳定版 SNAPSHOT是快照版 Spring项目的创建使用maven, 先创建一个最基本的spring框架: 写一个类的方法 package com.myCompany.helloWorld; i...","link":"","photos":[],"count_time":{"symbolsCount":"5.4k","symbolsTime":"5 mins."},"categories":[{"name":"Study","slug":"Study","count":12,"path":"api/categories/Study.json"}],"tags":[{"name":"Spring","slug":"Spring","count":2,"path":"api/tags/Spring.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Spring%E9%A1%B9%E7%9B%AE%E7%9A%84%E5%88%9B%E5%BB%BA\"><span class=\"toc-text\">Spring项目的创建</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#IOC%E5%AE%B9%E5%99%A8\"><span class=\"toc-text\">IOC容器</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8F%8D%E5%B0%84\"><span class=\"toc-text\">反射</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#IOC%E6%8E%A5%E5%8F%A3\"><span class=\"toc-text\">IOC接口</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1%E4%B9%8B%E5%90%8E%E7%9A%84%E6%B3%A8%E5%85%A5%E5%B1%9E%E6%80%A7\"><span class=\"toc-text\">创建对象之后的注入属性</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#xml%E9%85%8D%E7%BD%AE%E6%97%A0%E5%8F%82%E6%9E%84%E9%80%A0set%E7%9A%84%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">xml配置无参构造set的方法:</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%9C%89%E5%8F%82%E6%9E%84%E9%80%A0%E7%9A%84xml%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">有参构造的xml方法:</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#p%E6%96%B9%E5%BC%8F%E6%B3%A8%E5%85%A5\"><span class=\"toc-text\">p方式注入</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E7%89%B9%E6%AE%8A%E7%94%A8%E6%B3%95\"><span class=\"toc-text\">配置文件特殊用法</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#IOC%E4%B8%8EDI\"><span class=\"toc-text\">IOC与DI</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#TheEND\"><span class=\"toc-text\">TheEND</span></a></li></ol>","author":{"name":"Someone Serious","slug":"blog-author","avatar":"/img/photo.jpg","link":"/","description":"here is someone serious <br />只是一个小学生, 学艺不精多多见谅","socials":{"github":"https://github.com/Some1Serious","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"QQ":{"icon":"/svg/QQ.svg","link":"/img/myQQ.png"},"Email":{"icon":"/svg/email-fill.svg","link":"mailto:1025698918@qq.com"}}}},"mapped":true,"prev_post":{"title":"Spring Study day02","uid":"d8446112450bdc11bfa73254c1a2fc8c","slug":"springBoot/Spring-Study-day02","date":"2022-11-13T02:10:54.000Z","updated":"2022-11-15T11:43:01.719Z","comments":true,"path":"api/articles/springBoot/Spring-Study-day02.json","keywords":null,"cover":"/img/spring_01.png","text":"前言今天是周末, 又是学习的一天, 从早学到晚, 感觉自己的腰椎要顶不住了. (；へ：) 承接上文的xml配置对数组进行赋值private List&lt;String&gt; list; &#x2F;&#x2F;注意这里是List 不是ArrayList private oth...","link":"","photos":[],"count_time":{"symbolsCount":"9.6k","symbolsTime":"9 mins."},"categories":[{"name":"Study","slug":"Study","count":12,"path":"api/categories/Study.json"}],"tags":[{"name":"Spring","slug":"Spring","count":2,"path":"api/tags/Spring.json"}],"author":{"name":"Someone Serious","slug":"blog-author","avatar":"/img/photo.jpg","link":"/","description":"here is someone serious <br />只是一个小学生, 学艺不精多多见谅","socials":{"github":"https://github.com/Some1Serious","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"QQ":{"icon":"/svg/QQ.svg","link":"/img/myQQ.png"},"Email":{"icon":"/svg/email-fill.svg","link":"mailto:1025698918@qq.com"}}}},"feature":false},"next_post":{"title":"Maven res 01 HelloWorld","uid":"76ec667c92deac2437fb208989cf59f5","slug":"Maven/Maven-res-01","date":"2022-11-12T03:14:14.000Z","updated":"2022-11-15T11:43:21.491Z","comments":true,"path":"api/articles/Maven/Maven-res-01.json","keywords":null,"cover":"/img/apache-maven.png","text":"学习传送门 目的描述​ 1. 创建一个Maven项目, 其中包括父类 maven_parent, 以及他的三个子模块maven_dao, maven_service, maven_controller ​ 2. 三个子模块的用途与依赖关系 maven_dao maven_serv...","link":"","photos":[],"count_time":{"symbolsCount":"2.6k","symbolsTime":"2 mins."},"categories":[{"name":"Result","slug":"Result","count":1,"path":"api/categories/Result.json"}],"tags":[{"name":"Maven","slug":"Maven","count":2,"path":"api/tags/Maven.json"}],"author":{"name":"Someone Serious","slug":"blog-author","avatar":"/img/photo.jpg","link":"/","description":"here is someone serious <br />只是一个小学生, 学艺不精多多见谅","socials":{"github":"https://github.com/Some1Serious","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"QQ":{"icon":"/svg/QQ.svg","link":"/img/myQQ.png"},"Email":{"icon":"/svg/email-fill.svg","link":"mailto:1025698918@qq.com"}}}},"feature":false}}