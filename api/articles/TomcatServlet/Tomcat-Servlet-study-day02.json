{"title":"Tomcat Servlet study day02","uid":"6874dacf7173c2e0b3c898051819a0ee","slug":"TomcatServlet/Tomcat-Servlet-study-day02","date":"2022-11-18T08:26:06.000Z","updated":"2022-11-18T12:06:19.959Z","comments":true,"path":"api/articles/TomcatServlet/Tomcat-Servlet-study-day02.json","keywords":null,"cover":"/img/Tomcat.jfif","content":"<h2 id=\"Request与Response\"><a href=\"#Request与Response\" class=\"headerlink\" title=\"Request与Response\"></a>Request与Response</h2><p>Request是用来获取请求数据</p>\n<p>Response是用来相应数据的</p>\n<p>现在已经十一点半了, 已经学不动了, 从下午一点开始一直学到晚上十一点半, 拉磨的驴都受不了. </p>\n<h3 id=\"request\"><a href=\"#request\" class=\"headerlink\" title=\"request\"></a>request</h3><h4 id=\"1-请求行\"><a href=\"#1-请求行\" class=\"headerlink\" title=\"1. 请求行\"></a>1. 请求行</h4><p><img src=\"/image-20221118103039922.png\" alt=\"image-20221118103039922\"></p>\n<p>tomcat解析传递信息, 封装到它创建的request中, 然后传入serves方法中, 给我们调用. </p>\n<p><img src=\"/image-20221118103733734.png\" alt=\"image-20221118103733734\"></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@WebServlet(urlPatterns &#x3D; &#123;&quot;&#x2F;MyHttpServlet1&quot;, &quot;&#x2F;MyHttpServlet2&quot;&#125;)\npublic class MyHttpServlet extends HttpServlet &#123;\n\n    @Override\n    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;\n\n\n        &#x2F;&#x2F;返回请求的方式\n        String method &#x3D; req.getMethod();\n        System.out.println(&quot;method:&quot; + method);\n\n\n        &#x2F;&#x2F; 返回项目访问的路径\n        String contextPath &#x3D; req.getContextPath();\n        System.out.println(&quot;contextPath:&quot; + contextPath);\n\n        &#x2F;&#x2F;获取相对路径\n        String requestURI &#x3D; req.getRequestURI();\n        System.out.println(&quot;requestURI:&quot; + requestURI);\n\n        &#x2F;&#x2F;获取这个URL\n        StringBuffer requestURL &#x3D; req.getRequestURL();\n        System.out.println(&quot;requestURL:&quot; + requestURL.toString());\n\n        &#x2F;&#x2F;获取GET方法的数据, 我们可以用split切割获取键值对 数据存放在地址?后面, 用&amp;分割\n        String queryString &#x3D; req.getQueryString();\n        System.out.println(&quot;queryString:&quot; + queryString);\n\n\n    &#125;</code></pre>\n\n<pre class=\"line-numbers language-text\" data-language=\"text\"><code class=\"language-text\">method:GET\ncontextPath:&#x2F;myTomcat_war\nrequestURI:&#x2F;myTomcat_war&#x2F;MyHttpServlet1\nrequestURL:http:&#x2F;&#x2F;localhost:8080&#x2F;myTomcat_war&#x2F;MyHttpServlet1\nqueryString:null\n\nmethod:GET\ncontextPath:&#x2F;myTomcat_war\nrequestURI:&#x2F;myTomcat_war&#x2F;MyHttpServlet1\nrequestURL:http:&#x2F;&#x2F;localhost:8080&#x2F;myTomcat_war&#x2F;MyHttpServlet1\nqueryString:hello&#x3D;123&amp;qwe&#x3D;456</code></pre>\n\n<h4 id=\"2-请求头\"><a href=\"#2-请求头\" class=\"headerlink\" title=\"2. 请求头\"></a>2. 请求头</h4><p><img src=\"/image-20221118105833812.png\" alt=\"image-20221118105833812\"></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">String header &#x3D; req.getHeader(&quot;User-Agent&quot;);\nSystem.out.println(&quot;header:&quot; + header);</code></pre>\n\n<pre class=\"line-numbers language-text\" data-language=\"text\"><code class=\"language-text\">header:Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;107.0.0.0 Safari&#x2F;537.36 Edg&#x2F;107.0.1418.42</code></pre>\n\n<h4 id=\"3-请求体\"><a href=\"#3-请求体\" class=\"headerlink\" title=\"3. 请求体\"></a>3. 请求体</h4><p><img src=\"/image-20221118111349118.png\" alt=\"image-20221118111349118\"></p>\n<p>要在post方法中才能调用, 我们要先写一个关于post请求的html页面. </p>\n<pre class=\"line-numbers language-jsp\" data-language=\"jsp\"><code class=\"language-jsp\">&lt;!-- 注意这里的action设置前面没哟&#39;&#x2F;&#39;, 这样会显示相对路劲, 相对于当前项目 --&gt;\n&lt;form action&#x3D;&quot;MyHttpServlet1&quot; method&#x3D;&quot;post&quot;&gt;\n    &lt;label&gt;\n        123\n        &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;username&quot;&gt;\n    &lt;&#x2F;label&gt;\n    &lt;label&gt;\n        &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;password&quot;&gt;\n    &lt;&#x2F;label&gt;\n    &lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;submit&quot;&gt;\n&lt;&#x2F;form&gt;</code></pre>\n\n<p>在servlet实现类中:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Override\nprotected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;\n\n    &#x2F;&#x2F;通过输入流来输入数据, 我们不需要手动关闭输入流, 因为req会被自动关闭\n    BufferedReader reader &#x3D; req.getReader();\n    String s &#x3D; reader.readLine();\n    System.out.println(s);\n\n&#125;</code></pre>\n\n<p>res:</p>\n<pre class=\"line-numbers language-text\" data-language=\"text\"><code class=\"language-text\">username&#x3D;name&amp;password&#x3D;pwd</code></pre>\n\n<h4 id=\"4-获取请求数据\"><a href=\"#4-获取请求数据\" class=\"headerlink\" title=\"4.获取请求数据\"></a>4.获取请求数据</h4><p>聪明如你也应该想到, 上面这种数据获取方式谁要啊, 我们想要的状态是直接获取一个字典, 然后通过键值对直接获取数据, 这个当然也是可以的. 方法如下:</p>\n<div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">提示</p>\n<p><p>idea输入iter可以快速写遍历函数</p>\n</p>\n</div>\n<p>处理了一个<strong>jsp网页乱码的问题</strong>, 我们在jsp页面头部加上相关编码信息</p>\n<pre class=\"line-numbers language-jsp\" data-language=\"jsp\"><code class=\"language-jsp\">&lt;%@ page language&#x3D;&quot;java&quot; contentType&#x3D;&quot;text&#x2F;html; charset&#x3D;UTF-8&quot; pageEncoding&#x3D;&quot;UTF-8&quot;%&gt;\n</code></pre>\n\n<div class=\"custom-quote danger\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M19.76 5.23C15.84 5.23 12 2 12 2C12 2 8.15996 5.23 4.23996 5.23C4.23996 5.23 1.86996 16.99 12 22C22.13 16.99 19.76 5.23 19.76 5.23Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12 8V13\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 16H12\"></path>\n</svg>\n</span>\n<p class=\"custom-quote-title\">特别注意</p>\n<p>这里有一个没有处理的问题, checkbox的value值为中文时, 传输回java会报乱码</p>\n<p>已经解决了, tomcat8及以上的版本就用下面的方法post与get方法都可以处理, 如果是之前的版本则再用其他方式处理. </p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">req.setCharacterEncoding(&quot;UTF-8&quot;);</code></pre>\n\n\n\n\n</div>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">    @Override\n    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;\n\n        &#x2F;&#x2F;通过输入流来输入数据, 我们不需要手动关闭输入流, 因为req会被自动关闭\n        &#x2F;&#x2F; 这是得到字典的方法, 因为有checkbox的存在, 所以是name对应一个value数组\n        Map&lt;String, String[]&gt; parameterMap &#x3D; req.getParameterMap();\n        for (String key : parameterMap.keySet()) &#123;\n            System.out.println(key + &quot;:&quot; + Arrays.toString(parameterMap.get(key)));\n        &#125;\n        \n        &#x2F;&#x2F; 如果知道传入是一个数组, 这样单拿\n        String[] hobbies &#x3D; req.getParameterValues(&quot;hobby&quot;);\n        for (String hobby : hobbies) &#123;\n            System.out.println(hobby);\n        &#125;\n        \n        &#x2F;&#x2F;单取非数组\n        String username &#x3D; req.getParameter(&quot;username&quot;);\n        System.out.println(username);\n\n    &#125;\n&#125;</code></pre>\n\n<div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">提示</p>\n<p><p>这里的方法, 在get与post中就统一了, 所以我们可以这么写</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">    @Override\n    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;\n\t\t\n        &#x2F;&#x2F;使用字典或者单值获取的方式, 做到get与post统一\n\t\t&#x2F;&#x2F;....\n\n\n    &#125;\n\n    @Override\n    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;\n\t\t\n        &#x2F;&#x2F; 直接调用\n        doGet(req, resp);\n    &#125;\n&#125;</code></pre>\n\n</p>\n</div>\n<hr>\n<h4 id=\"4-请求转发\"><a href=\"#4-请求转发\" class=\"headerlink\" title=\"4. 请求转发\"></a>4. 请求转发</h4><p>当服务器来一个请求的时候, 我们可以把请求<strong>转发</strong>到另外一个servlet里面去, 当然, servlet之间也可以<strong>共享资源</strong>, 通过把资源附加在<code>request</code>里面的方式</p>\n<p><img src=\"/post/TomcatServlet/Tomcat-Servlet-study-day02/image-20221118185134772.png\" alt=\"image-20221118185134772\"></p>\n<p>下面是实例代码:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@WebServlet(&quot;&#x2F;MyHttpServlet1&quot;)\npublic class MyHttpServlet extends HttpServlet &#123;\n\n    @Override\n    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;\n\n\n\n        System.out.println(&quot;我们已经执行了servlet一号里面的内容&quot;);\n\n        &#x2F;&#x2F;向req里面添加了一些内容, 通过字典的方式, key:string, value:Object\n        req.setAttribute(&quot;something&quot;, &quot;the value&quot;);\n\n        &#x2F;&#x2F;跳转到&#x2F;MyHttpServlet2去执行相应的servlet代码, 调用的是get方法\n        req.getRequestDispatcher(&quot;&#x2F;MyHttpServlet2&quot;).forward(req, resp);\n\n    &#125;\n\n    @Override\n    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;\n\n        req.setCharacterEncoding(&quot;UTF-8&quot;);\n        this.doGet(req, resp);\n    &#125;\n&#125;</code></pre>\n\n<p>另一个类:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@WebServlet(&quot;&#x2F;MyHttpServlet2&quot;)\npublic class MyHttpServlet2 extends HttpServlet &#123;\n\n    @Override\n    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;\n\n        System.out.println(&quot;this is get, run on MyHttpServlet2&quot;);\n\n        Object something &#x3D; req.getAttribute(&quot;something&quot;);\n        System.out.println(&quot;something:&quot; + something.toString());\n\t\t      \n        &#x2F;&#x2F;可以删掉相应的键值对\n        req.removeAttribute(&quot;something&quot;);\n\n    &#125;\n\n    @Override\n    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;\n\n        System.out.println(&quot;this is post...&quot;);\n        req.setCharacterEncoding(&quot;UTF-8&quot;);\n        this.doGet(req, resp);\n    &#125;\n&#125;</code></pre>\n\n<h3 id=\"Response\"><a href=\"#Response\" class=\"headerlink\" title=\"Response\"></a>Response</h3><p><img src=\"/post/TomcatServlet/Tomcat-Servlet-study-day02/image-20221118190412204.png\" alt=\"image-20221118190412204\"></p>\n<h4 id=\"1-重定向\"><a href=\"#1-重定向\" class=\"headerlink\" title=\"1. 重定向\"></a>1. 重定向</h4><p><img src=\"/post/TomcatServlet/Tomcat-Servlet-study-day02/image-20221118191144348.png\" alt=\"image-20221118191144348\"></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;\n\n\n\n        System.out.println(&quot;我们已经执行了servlet一号里面的内容&quot;);\n\n&#x2F;&#x2F;        &#x2F;&#x2F;可以直接执行系统外部的网站\n&#x2F;&#x2F;        resp.sendRedirect(&quot;https:&#x2F;&#x2F;www.baidu.com&#x2F;&quot;);\n\n        &#x2F;&#x2F;注意, 这里要写项目名, 我们通过请求头获取项目名, 降低耦合\n        String contextPath &#x3D; req.getContextPath();\n        System.out.println(contextPath);\n        resp.sendRedirect(contextPath + &quot;&#x2F;MyHttpServlet2&quot;);\n\n    &#125;</code></pre>\n\n<h4 id=\"2-相应字符字节数据\"><a href=\"#2-相应字符字节数据\" class=\"headerlink\" title=\"2. 相应字符字节数据\"></a>2. 相应字符字节数据</h4><p><img src=\"/post/TomcatServlet/Tomcat-Servlet-study-day02/image-20221118194113172.png\" alt=\"image-20221118194113172\"></p>\n<p>字符</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">    @Override\n    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;\n\n\n\n        System.out.println(&quot;我们已经执行了servlet一号里面的内容&quot;);\n        resp.setContentType(&quot;text&#x2F;html;charset&#x3D;utf-8&quot;);\n        &#x2F;&#x2F;因为writer会在response结束之后结束掉, 所以所以我们没有必要手动关闭writer\n        PrintWriter writer &#x3D; resp.getWriter();\n\n&#x2F;&#x2F;        &#x2F;&#x2F;设置回复头, 设置回复的数据是html数据\n&#x2F;&#x2F;        resp.setHeader(&quot;content-type&quot;, &quot;text&#x2F;html&quot;);\n        &#x2F;&#x2F;上面这种设置方法我们不用, 我们用下面的设置方法, 能同时更改编码, 避免乱码的问题\n\n\n        &#x2F;&#x2F;我们可以写一些字符, 但是输入中文仍然会报错, 我们需要更改编码\n        writer.write(&quot;中文&quot;);\n\n        writer.write(&quot;&lt;h1&gt;中文&lt;&#x2F;h1&gt;&quot;);\n    &#125;</code></pre>\n\n<p>字节</p>\n<p>当我们输入一些图片视频文件信息时, 我们需要字节输入. </p>\n<div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">提示</p>\n<p>这里我们建议使用commons-io</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;dependency&gt;\n  &lt;groupId&gt;commons-io&lt;&#x2F;groupId&gt;\n  &lt;artifactId&gt;commons-io&lt;&#x2F;artifactId&gt;\n  &lt;version&gt;2.11.0&lt;&#x2F;version&gt;\n&lt;&#x2F;dependency&gt;</code></pre>\n\n\n</div>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">        &#x2F;&#x2F;创建文件流和输出流\n        FileInputStream fileInputStream &#x3D; new FileInputStream(&quot;C:\\\\Users\\\\Bincolo\\\\Desktop\\\\1.doc&quot;);\n&#x2F;&#x2F;        FileInputStream fileInputStream1 &#x3D; new FileInputStream(&quot;F:\\\\newBlog\\\\source\\\\img\\\\inspiration.jfif&quot;);\n\n        ServletOutputStream outputStream &#x3D; resp.getOutputStream();\n\n        IOUtils.copy(fileInputStream, outputStream);</code></pre>\n\n\n\n<h3 id=\"是否加虚拟目录问题\"><a href=\"#是否加虚拟目录问题\" class=\"headerlink\" title=\"是否加虚拟目录问题\"></a>是否加虚拟目录问题</h3><p><img src=\"/post/TomcatServlet/Tomcat-Servlet-study-day02/image-20221118191847402.png\" alt=\"image-20221118191847402\"></p>\n<hr>\n<h2 id=\"idea修改模板的小工具\"><a href=\"#idea修改模板的小工具\" class=\"headerlink\" title=\"idea修改模板的小工具\"></a>idea修改模板的小工具</h2><p>以后我们每次编写post都要调用doGet, 所以我们要修改模板, 在创建servlet类的时候自动创建;</p>\n<p><img src=\"/post/TomcatServlet/Tomcat-Servlet-study-day02/image-20221118170521345.png\" alt=\"image-20221118170521345\"></p>\n<p>首先我们有这个模板, 我们只需要更改一下</p>\n<p><img src=\"/post/TomcatServlet/Tomcat-Servlet-study-day02/image-20221118171007496.png\" alt=\"image-20221118171007496\"></p>\n<p>找到地址之后, 我们改两个地方:</p>\n<p><img src=\"/post/TomcatServlet/Tomcat-Servlet-study-day02/image-20221118171031741.png\" alt=\"image-20221118171031741\"></p>\n<p><img src=\"/post/TomcatServlet/Tomcat-Servlet-study-day02/image-20221118171054754.png\" alt=\"image-20221118171054754\"></p>\n","feature":false,"text":"Request与ResponseRequest是用来获取请求数据 Response是用来相应数据的 现在已经十一点半了, 已经学不动了, 从下午一点开始一直学到晚上十一点半, 拉磨的驴都受不了. request1. 请求行 tomcat解析传递信息, 封装到它创建的request...","link":"","photos":[],"count_time":{"symbolsCount":"8.7k","symbolsTime":"8 mins."},"categories":[{"name":"Study","slug":"Study","count":15,"path":"api/categories/Study.json"}],"tags":[{"name":"Tomcat","slug":"Tomcat","count":2,"path":"api/tags/Tomcat.json"},{"name":"Servlet","slug":"Servlet","count":2,"path":"api/tags/Servlet.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Request%E4%B8%8EResponse\"><span class=\"toc-text\">Request与Response</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#request\"><span class=\"toc-text\">request</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-%E8%AF%B7%E6%B1%82%E8%A1%8C\"><span class=\"toc-text\">1. 请求行</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-%E8%AF%B7%E6%B1%82%E5%A4%B4\"><span class=\"toc-text\">2. 请求头</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-%E8%AF%B7%E6%B1%82%E4%BD%93\"><span class=\"toc-text\">3. 请求体</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-%E8%8E%B7%E5%8F%96%E8%AF%B7%E6%B1%82%E6%95%B0%E6%8D%AE\"><span class=\"toc-text\">4.获取请求数据</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-%E8%AF%B7%E6%B1%82%E8%BD%AC%E5%8F%91\"><span class=\"toc-text\">4. 请求转发</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Response\"><span class=\"toc-text\">Response</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-%E9%87%8D%E5%AE%9A%E5%90%91\"><span class=\"toc-text\">1. 重定向</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-%E7%9B%B8%E5%BA%94%E5%AD%97%E7%AC%A6%E5%AD%97%E8%8A%82%E6%95%B0%E6%8D%AE\"><span class=\"toc-text\">2. 相应字符字节数据</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%98%AF%E5%90%A6%E5%8A%A0%E8%99%9A%E6%8B%9F%E7%9B%AE%E5%BD%95%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">是否加虚拟目录问题</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#idea%E4%BF%AE%E6%94%B9%E6%A8%A1%E6%9D%BF%E7%9A%84%E5%B0%8F%E5%B7%A5%E5%85%B7\"><span class=\"toc-text\">idea修改模板的小工具</span></a></li></ol>","author":{"name":"Someone Serious","slug":"blog-author","avatar":"/img/photo.jpg","link":"/","description":"here is someone serious <br />只是一个小学生, 学艺不精多多见谅","socials":{"github":"https://github.com/Some1Serious","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"QQ":{"icon":"/svg/QQ.svg","link":"/img/myQQ.png"},"Email":{"icon":"/svg/email-fill.svg","link":"mailto:1025698918@qq.com"}}}},"mapped":true,"prev_post":{"title":"Css Skill 01","uid":"d4a56035763a2a8e516ae03b6a6591a1","slug":"HtmlCssJs/Css-Skill-01","date":"2022-11-20T03:23:42.000Z","updated":"2022-11-20T03:33:15.506Z","comments":true,"path":"api/articles/HtmlCssJs/Css-Skill-01.json","keywords":null,"cover":"/img/css.jpg","text":"刷新问题有时更改了css但是浏览器缺不更新, 原因是缓存, 我们需要ctrl + f5进行刷新就可以了. 新手指南CSS Cheat Sheet - Interactive, not a PDF | HTMLCheatSheet.com ","link":"","photos":[],"count_time":{"symbolsCount":120,"symbolsTime":"1 mins."},"categories":[{"name":"Skill","slug":"Skill","count":2,"path":"api/categories/Skill.json"}],"tags":[{"name":"css","slug":"css","count":1,"path":"api/tags/css.json"}],"author":{"name":"Someone Serious","slug":"blog-author","avatar":"/img/photo.jpg","link":"/","description":"here is someone serious <br />只是一个小学生, 学艺不精多多见谅","socials":{"github":"https://github.com/Some1Serious","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"QQ":{"icon":"/svg/QQ.svg","link":"/img/myQQ.png"},"Email":{"icon":"/svg/email-fill.svg","link":"mailto:1025698918@qq.com"}}}},"feature":false},"next_post":{"title":"Tomcat&Servlet study day01","uid":"27c7493502c2dd3c944effcfc2ce9fdc","slug":"TomcatServlet/Tomcat-Servlet-study-day01","date":"2022-11-17T13:36:48.000Z","updated":"2022-11-18T08:27:04.387Z","comments":true,"path":"api/articles/TomcatServlet/Tomcat-Servlet-study-day01.json","keywords":null,"cover":"/img/Tomcat.jfif","text":" 提示 一般的java项目是用jar包打包的, 而webapp使用war包打包的, 更改方式在maven的配置里面 &lt;groupId&gt;com.MyCompany&lt;&#x2F;groupId&gt; &lt;artifactId&gt;Mybatis&lt;&#x...","link":"","photos":[],"count_time":{"symbolsCount":"3.8k","symbolsTime":"3 mins."},"categories":[{"name":"Study","slug":"Study","count":15,"path":"api/categories/Study.json"}],"tags":[{"name":"Tomcat","slug":"Tomcat","count":2,"path":"api/tags/Tomcat.json"},{"name":"Servlet","slug":"Servlet","count":2,"path":"api/tags/Servlet.json"}],"author":{"name":"Someone Serious","slug":"blog-author","avatar":"/img/photo.jpg","link":"/","description":"here is someone serious <br />只是一个小学生, 学艺不精多多见谅","socials":{"github":"https://github.com/Some1Serious","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"QQ":{"icon":"/svg/QQ.svg","link":"/img/myQQ.png"},"Email":{"icon":"/svg/email-fill.svg","link":"mailto:1025698918@qq.com"}}}},"feature":false}}