{"title":"Tomcat&Servlet study day01","uid":"27c7493502c2dd3c944effcfc2ce9fdc","slug":"TomcatServlet/Tomcat-Servlet-study-day01","date":"2022-11-17T13:36:48.000Z","updated":"2022-11-18T08:27:04.387Z","comments":true,"path":"api/articles/TomcatServlet/Tomcat-Servlet-study-day01.json","keywords":null,"cover":"/img/Tomcat.jfif","content":"<div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">提示</p>\n<p><p>一般的java项目是用jar包打包的, 而webapp使用war包打包的, 更改方式在maven的配置里面</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">  &lt;groupId&gt;com.MyCompany&lt;&#x2F;groupId&gt;\n  &lt;artifactId&gt;Mybatis&lt;&#x2F;artifactId&gt;\n  &lt;version&gt;1.0-SNAPSHOT&lt;&#x2F;version&gt;\n  &lt;packaging&gt;jar&lt;&#x2F;packaging&gt;\n&lt;!--  下面是war包--&gt;\n&lt;!--  &lt;packaging&gt;war&lt;&#x2F;packaging&gt;--&gt;</code></pre>\n\n</p>\n</div>\n<h2 id=\"安装Tomcat\"><a href=\"#安装Tomcat\" class=\"headerlink\" title=\"安装Tomcat\"></a>安装Tomcat</h2><h3 id=\"1-通过maven的方法安装Tomcat\"><a href=\"#1-通过maven的方法安装Tomcat\" class=\"headerlink\" title=\"1. 通过maven的方法安装Tomcat\"></a>1. 通过maven的方法安装Tomcat</h3><p>在<a href=\"Maven/Maven-res-01\">maven的helloworld</a>里面有所展示, 这里就不多赘述了. </p>\n<h3 id=\"2-通过下载的方式导入Tomcat\"><a href=\"#2-通过下载的方式导入Tomcat\" class=\"headerlink\" title=\"2. 通过下载的方式导入Tomcat\"></a>2. 通过下载的方式导入Tomcat</h3><p>因为maven最多支持到Tomcat7, 想要更高的版本我们只能去官网下载. </p>\n<div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">提示</p>\n<p>官网下载的是绿色版, 既解压可用, 不需要安装与卸载</p>\n\n</div>\n<p>首先要配置Tomcat. 就在根目录下面的conf里面的server.xml</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;!-- 下面的port更改端口 --&gt;   \n&lt;Connector port&#x3D;&quot;8080&quot; protocol&#x3D;&quot;HTTP&#x2F;1.1&quot;\n               connectionTimeout&#x3D;&quot;20000&quot;\n               redirectPort&#x3D;&quot;8443&quot; &#x2F;&gt;</code></pre>\n\n<div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">提示</p>\n<p><p>80端口是默认端口, 也就是说, 如果只输入localhost, 后面不输入端口, 则默认是80端口, 这是一个特殊的端口, 我们也可以设置</p>\n<p>:::\t</p>\n<p>:::warning</p>\n<p>tomcat的编码默认是UTF-8, 这时会产生乱码的, 我们要把他改成GBK</p>\n<p>在<code>/conf/logging.properties</code>下,</p>\n<pre class=\"line-numbers language-properties\" data-language=\"properties\"><code class=\"language-properties\">java.util.logging.ConsoleHandler.encoding &#x3D; GBK</code></pre>\n\n</p>\n</div>\n<p><img src=\"/post/TomcatServlet/Tomcat-Servlet-study-day01/image-20221117215339627.png\" alt=\"image-20221117215339627\"></p>\n<h3 id=\"3-通过编辑配置的方法部署Tomcat\"><a href=\"#3-通过编辑配置的方法部署Tomcat\" class=\"headerlink\" title=\"3.通过编辑配置的方法部署Tomcat\"></a>3.通过编辑配置的方法部署Tomcat</h3><p><img src=\"/post/TomcatServlet/Tomcat-Servlet-study-day01/image-20221117215630428.png\" alt=\"image-20221117215630428\"></p>\n<p>注意, 其中要设置默认浏览器, 本地tomcat的地址, 端口号. url地址. </p>\n<p><img src=\"/post/TomcatServlet/Tomcat-Servlet-study-day01/image-20221117215715029.png\" alt=\"image-20221117215715029\"></p>\n<p>在部署里, 把包添加进去, </p>\n<div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">提示</p>\n<p>注意下面的程序上下文, 更改可以更改页面默认的地址</p>\n\n</div>\n<hr>\n<h2 id=\"Servlet\"><a href=\"#Servlet\" class=\"headerlink\" title=\"Servlet\"></a>Servlet</h2><p>tomcat作为服务器, 是帮助用户处理http协议, 快捷简便的搭建服务器, 而servlet是用于处理动态事务, 它只是一个规范, 一个接口, 一共有五个方法. </p>\n<div class=\"custom-quote warning\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12 8V13\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12 15.99V16.01\"></path>\n</svg>\n</span>\n<p class=\"custom-quote-title\">注意</p>\n<p><p>下面的包是错误的</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">    &lt;dependency&gt;\n      &lt;groupId&gt;javax.servlet&lt;&#x2F;groupId&gt;\n      &lt;artifactId&gt;servlet-api&lt;&#x2F;artifactId&gt;\n      &lt;version&gt;2.5&lt;&#x2F;version&gt;\n\n&lt;!--      注意, 下面一定要注意使用provided, 因为这样导出的包就没有servlet包了, 不然会与tomcat重合, 引发错误--&gt;\n      &lt;scope&gt;provided&lt;&#x2F;scope&gt;\n    &lt;&#x2F;dependency&gt;</code></pre>\n\n<p>下面的是正确的</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;dependency&gt;\n  &lt;groupId&gt;javax.servlet&lt;&#x2F;groupId&gt;\n  &lt;artifactId&gt;javax.servlet-api&lt;&#x2F;artifactId&gt;\n  &lt;version&gt;3.1.0&lt;&#x2F;version&gt;\n  &lt;scope&gt;provided&lt;&#x2F;scope&gt;\n&lt;&#x2F;dependency&gt;</code></pre>\n\n</p>\n</div>\n<h3 id=\"下面是实现接口\"><a href=\"#下面是实现接口\" class=\"headerlink\" title=\"下面是实现接口\"></a>下面是实现接口</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;&#x2F;下面是用来表明我的Servlet的目录地址\n@WebServlet(&quot;&#x2F;MyServlet&quot;)\npublic class MyServlet implements Servlet &#123;\n    \n    private ServletConfig servletConfig;\n\n    &#x2F;&#x2F;初始化, 可以设置在服务器启动时就初始化, 也可以设置在第一次打开时初始化\n    public void init(ServletConfig servletConfig) throws ServletException &#123;\n        this.servletConfig &#x3D; servletConfig;\n    &#125;\n\n    &#x2F;&#x2F;每次打开网页时触发这个方法\n    public void service(ServletRequest servletRequest, ServletResponse servletResponse) throws ServletException, IOException &#123;\n\n    &#125;\n\n    &#x2F;&#x2F;结束servlet时触发这个方法, 注意! 不是关闭页面, 而是结束servlet\n    public void destroy() &#123;\n\n    &#125;\n    \n    &#x2F;&#x2F;这个方法用于返回该servlet的配置, 在初始化时会传输一个配置, 传回去就好了\n    public ServletConfig getServletConfig() &#123;\n        return servletConfig;\n    &#125;\n\n\n    &#x2F;&#x2F;这个方法用于返回servlet的信息, 我们暂时返回null就可以了\n    public String getServletInfo() &#123;\n        return null;\n    &#125;\n\n\n&#125;</code></pre>\n\n<h2 id=\"HttpServlet\"><a href=\"#HttpServlet\" class=\"headerlink\" title=\"HttpServlet\"></a>HttpServlet</h2><p>httpServlet是对Servlet接口的一种实现, 我们就没有必要再用那个破接口了, 而可以直接使用现成的类, 并重写它已达到我们的目的. </p>\n<p>主要重写以下两个方法</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@WebServlet(&quot;&#x2F;MyHttpServlet&quot;)\npublic class MyHttpServlet extends HttpServlet &#123;\n\t\n    &#x2F;&#x2F;对get请求处理(直接登录页面算get请求)\n    @Override\n    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;\n        super.doGet(req, resp);\n    &#125;\n\t\n    &#x2F;&#x2F;对post请求处理\n    @Override\n    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;\n        super.doPost(req, resp);\n    &#125;\n&#125;</code></pre>\n\n<p>那么我们还不得不再说一下get与post的不同</p>\n<h2 id=\"Get-and-Post\"><a href=\"#Get-and-Post\" class=\"headerlink\" title=\"Get and Post\"></a>Get and Post</h2><p>Get同于传少量数据(最大不能超过4kb), 并且存放于请求头, 没有请求体</p>\n<p>post用于存放大量数据, 存放于请求体, 更加安全, 我们一般选用post请求方式.</p>\n<hr>\n<h2 id=\"一个servlet可以有多个地址\"><a href=\"#一个servlet可以有多个地址\" class=\"headerlink\" title=\"一个servlet可以有多个地址\"></a>一个servlet可以有多个地址</h2><h3 id=\"通过输入配置\"><a href=\"#通过输入配置\" class=\"headerlink\" title=\"通过输入配置\"></a>通过输入配置</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@WebServlet(urlPatterns &#x3D; &#123;&quot;&#x2F;MyHttpServlet1&quot;, &quot;&#x2F;MyHttpServlet2&quot;&#125;)</code></pre>\n\n<h3 id=\"通过urlPattern配置\"><a href=\"#通过urlPattern配置\" class=\"headerlink\" title=\"通过urlPattern配置\"></a>通过urlPattern配置</h3><p><img src=\"/post/TomcatServlet/Tomcat-Servlet-study-day01/image-20221117230137660.png\" alt=\"image-20221117230137660\"></p>\n<div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">提示</p>\n<p>如果同时满足多个匹配, 则图中的顺序同时也是优先级</p>\n<p>注意同种的第三种匹配, 它前面不能有<code>/</code></p>\n<p>注意第四种方法, 不要用”&#x2F;“的方法, 因为它会覆盖掉tomcat中默认的帮助访问静态资源的servlet</p>\n\n</div>\n","feature":false,"text":" 提示 一般的java项目是用jar包打包的, 而webapp使用war包打包的, 更改方式在maven的配置里面 &lt;groupId&gt;com.MyCompany&lt;&#x2F;groupId&gt; &lt;artifactId&gt;Mybatis&lt;&#x...","link":"","photos":[],"count_time":{"symbolsCount":"3.8k","symbolsTime":"3 mins."},"categories":[{"name":"Study","slug":"Study","count":18,"path":"api/categories/Study.json"}],"tags":[{"name":"Tomcat","slug":"Tomcat","count":2,"path":"api/tags/Tomcat.json"},{"name":"Servlet","slug":"Servlet","count":2,"path":"api/tags/Servlet.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AE%89%E8%A3%85Tomcat\"><span class=\"toc-text\">安装Tomcat</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E9%80%9A%E8%BF%87maven%E7%9A%84%E6%96%B9%E6%B3%95%E5%AE%89%E8%A3%85Tomcat\"><span class=\"toc-text\">1. 通过maven的方法安装Tomcat</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E9%80%9A%E8%BF%87%E4%B8%8B%E8%BD%BD%E7%9A%84%E6%96%B9%E5%BC%8F%E5%AF%BC%E5%85%A5Tomcat\"><span class=\"toc-text\">2. 通过下载的方式导入Tomcat</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E9%80%9A%E8%BF%87%E7%BC%96%E8%BE%91%E9%85%8D%E7%BD%AE%E7%9A%84%E6%96%B9%E6%B3%95%E9%83%A8%E7%BD%B2Tomcat\"><span class=\"toc-text\">3.通过编辑配置的方法部署Tomcat</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Servlet\"><span class=\"toc-text\">Servlet</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%8B%E9%9D%A2%E6%98%AF%E5%AE%9E%E7%8E%B0%E6%8E%A5%E5%8F%A3\"><span class=\"toc-text\">下面是实现接口</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#HttpServlet\"><span class=\"toc-text\">HttpServlet</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Get-and-Post\"><span class=\"toc-text\">Get and Post</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%80%E4%B8%AAservlet%E5%8F%AF%E4%BB%A5%E6%9C%89%E5%A4%9A%E4%B8%AA%E5%9C%B0%E5%9D%80\"><span class=\"toc-text\">一个servlet可以有多个地址</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%80%9A%E8%BF%87%E8%BE%93%E5%85%A5%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">通过输入配置</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%80%9A%E8%BF%87urlPattern%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">通过urlPattern配置</span></a></li></ol></li></ol>","author":{"name":"Someone Serious","slug":"blog-author","avatar":"/img/photo.jpg","link":"/","description":"here is someone serious <br />只是一个小学生, 学艺不精多多见谅","socials":{"github":"https://github.com/Some1Serious","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"QQ":{"icon":"/svg/QQ.svg","link":"/img/myQQ.png"},"Email":{"icon":"/svg/email-fill.svg","link":"mailto:1025698918@qq.com"}}}},"mapped":true,"prev_post":{"title":"Tomcat Servlet study day02","uid":"6874dacf7173c2e0b3c898051819a0ee","slug":"TomcatServlet/Tomcat-Servlet-study-day02","date":"2022-11-18T08:26:06.000Z","updated":"2022-11-18T12:06:19.959Z","comments":true,"path":"api/articles/TomcatServlet/Tomcat-Servlet-study-day02.json","keywords":null,"cover":"/img/Tomcat.jfif","text":"Request与ResponseRequest是用来获取请求数据 Response是用来相应数据的 现在已经十一点半了, 已经学不动了, 从下午一点开始一直学到晚上十一点半, 拉磨的驴都受不了. request1. 请求行 tomcat解析传递信息, 封装到它创建的request...","link":"","photos":[],"count_time":{"symbolsCount":"8.7k","symbolsTime":"8 mins."},"categories":[{"name":"Study","slug":"Study","count":18,"path":"api/categories/Study.json"}],"tags":[{"name":"Tomcat","slug":"Tomcat","count":2,"path":"api/tags/Tomcat.json"},{"name":"Servlet","slug":"Servlet","count":2,"path":"api/tags/Servlet.json"}],"author":{"name":"Someone Serious","slug":"blog-author","avatar":"/img/photo.jpg","link":"/","description":"here is someone serious <br />只是一个小学生, 学艺不精多多见谅","socials":{"github":"https://github.com/Some1Serious","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"QQ":{"icon":"/svg/QQ.svg","link":"/img/myQQ.png"},"Email":{"icon":"/svg/email-fill.svg","link":"mailto:1025698918@qq.com"}}}},"feature":false},"next_post":{"title":"javaScript Skill 01","uid":"c051c340bfcf71b6b3f4eb3eda1e06c5","slug":"HtmlCssJs/javaScript-Skill-01","date":"2022-11-17T04:50:00.000Z","updated":"2022-11-20T03:24:02.521Z","comments":true,"path":"api/articles/HtmlCssJs/javaScript-Skill-01.json","keywords":null,"cover":"/img/java-script.jpg","text":"这是我的第一篇关于skill的文章, 将来这个类别用于存放技巧性的内容. 关于检验数字将String转换为数字有两种方法: let x1 &#x3D; +&quot;123&quot;; &#x2F;&#x2F; 第一种, 前面加一个+号 x1 &#x3D; parseInt(x...","link":"","photos":[],"count_time":{"symbolsCount":478,"symbolsTime":"1 mins."},"categories":[{"name":"Skill","slug":"Skill","count":2,"path":"api/categories/Skill.json"}],"tags":[{"name":"javaScript","slug":"javaScript","count":2,"path":"api/tags/javaScript.json"}],"author":{"name":"Someone Serious","slug":"blog-author","avatar":"/img/photo.jpg","link":"/","description":"here is someone serious <br />只是一个小学生, 学艺不精多多见谅","socials":{"github":"https://github.com/Some1Serious","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"QQ":{"icon":"/svg/QQ.svg","link":"/img/myQQ.png"},"Email":{"icon":"/svg/email-fill.svg","link":"mailto:1025698918@qq.com"}}}},"feature":true}}