{"title":"MySql Study day01","uid":"fec74b413dc2868cc0a4ce6e062f6692","slug":"MySql/MySql-Study-day01","date":"2022-11-14T11:33:12.000Z","updated":"2022-11-15T03:40:04.690Z","comments":true,"path":"api/articles/MySql/MySql-Study-day01.json","keywords":null,"cover":"/img/mysql.jpg","content":"<h2 id=\"数据库设计\"><a href=\"#数据库设计\" class=\"headerlink\" title=\"数据库设计\"></a>数据库设计</h2><h3 id=\"一对一\"><a href=\"#一对一\" class=\"headerlink\" title=\"一对一\"></a>一对一</h3><p>一般用于表拆分, 一张用于常用查询, 一张用于非常用查询, 通过设置唯一外键实现</p>\n<h3 id=\"一对多\"><a href=\"#一对多\" class=\"headerlink\" title=\"一对多\"></a>一对多</h3><p>设置外键, 多的一放设置外键, 指向一的一放的主键. </p>\n<h3 id=\"多对多\"><a href=\"#多对多\" class=\"headerlink\" title=\"多对多\"></a>多对多</h3><p>设置另一张表, 包含两个外键, 包含两个表的两个主键. </p>\n<p><img src=\"/post/MySql/MySql-Study-day01/image-20221114193518719.png\" alt=\"image-20221114193518719\"></p>\n<h2 id=\"多表查询\"><a href=\"#多表查询\" class=\"headerlink\" title=\"多表查询\"></a>多表查询</h2><pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">select 字段列表 from 表 where 字段名 &#x3D; (子查询)</code></pre>\n\n<h3 id=\"单行单列\"><a href=\"#单行单列\" class=\"headerlink\" title=\"单行单列\"></a>单行单列</h3><p>直接用大于小于等于</p>\n<h3 id=\"多列单行\"><a href=\"#多列单行\" class=\"headerlink\" title=\"多列单行\"></a>多列单行</h3><p>用in()查询</p>\n<h3 id=\"多行多列\"><a href=\"#多行多列\" class=\"headerlink\" title=\"多行多列\"></a>多行多列</h3><p>作为from后面的表进行查询</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">select 字段列表 from (子查询)t1 where 字段名 &#x3D; ...</code></pre>\n\n<p>子查询后面跟的t1用来称呼前面的子查询.</p>\n<h3 id=\"内连接\"><a href=\"#内连接\" class=\"headerlink\" title=\"内连接\"></a>内连接</h3><pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">select\n\ttable1.id\n\ttable1.name\n\ttable2.data\n\ttable3.data\nfrom\n\ttable1\nInner join table2 on table2.id &#x3D; table1.id\nInner join table3 on table3.id &#x3D; table1.id</code></pre>\n\n\n\n<h2 id=\"JDBC\"><a href=\"#JDBC\" class=\"headerlink\" title=\"JDBC\"></a>JDBC</h2><p>是java语言来操作sql语言的一套API接口, java代码没有办法用同一套代码操控不同的数据库, 所以为了解决这个问题, sun公司创造了JDBC规范, 就是一个接口, 而不同的数据库则根据JDBC制作实现类, 我们以后就可以通过接口用同一套代码了, 当然要导入相应数据库的实现类, 就是相应数据库的jar包, 也叫<strong>驱动</strong>.</p>\n<p><img src=\"/post/MySql/MySql-Study-day01/image-20221114233949738.png\" alt=\"image-20221114233949738\"></p>\n<h3 id=\"导入JDBC\"><a href=\"#导入JDBC\" class=\"headerlink\" title=\"导入JDBC\"></a>导入JDBC</h3><ol>\n<li><p>导入相应的驱动</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;dependency&gt;\n  &lt;groupId&gt;mysql&lt;&#x2F;groupId&gt;\n  &lt;artifactId&gt;mysql-connector-java&lt;&#x2F;artifactId&gt;\n  &lt;version&gt;8.0.28&lt;&#x2F;version&gt;\n&lt;&#x2F;dependency&gt;</code></pre>\n</li>\n<li><p>代码展示</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package com.myCompany.JDBC;\n\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.Statement;\n\npublic class JDBCDemo &#123;\n\n    public static void main(String[] args) throws Exception &#123;\n\n        &#x2F;&#x2F; 1. 导入相关驱动\n        Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);\n\n        &#x2F;&#x2F;2. 创建相关连接\n        String url &#x3D; &quot;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;jdbc_demo&quot;;\n        String userName &#x3D; &quot;root&quot;;\n        String password &#x3D; &quot;Sxs12367&quot;;\n        Connection connection &#x3D; DriverManager.getConnection(url, userName, password);\n\n        &#x2F;&#x2F;3. 编写相关查询语句\n        String sql &#x3D; &quot;create TABLE table_demo(\\n&quot; +\n                &quot;    id int primary key ,\\n&quot; +\n                &quot;    name varchar(10) not null ,\\n&quot; +\n                &quot;    money int\\n&quot; +\n                &quot;);&quot;;\n\n        &#x2F;&#x2F;4. 由相关连接创建一个相关查询(新建查询)\n        Statement statement &#x3D; connection.createStatement();\n\n        &#x2F;&#x2F;5. 查询, 返回值count &#x3D; 影响行数\n        int count &#x3D; statement.executeUpdate(sql);\n        \n        &#x2F;&#x2F;6. 释放内存\n        connection.close();\n        statement.close();\n    &#125;\n&#125;</code></pre>\n\n<div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">提示</p>\n<p>现在的高版本启动已经不需要第一行导入驱动的代码了, 现在自动导入. </p>\n<p>url的格式是 ** jdbc:mysql:&#x2F;&#x2F;(ip地址+端口号)&#x2F;(数据库名)</p>\n<p>如果是本机的3306号端口的话, 可以省略.</p>\n\n</div>\n</li>\n<li><p>通过<code>connection</code>来操作事务</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class JDBCDemo &#123;\n\n    public static void main(String[] args) throws Exception &#123;\n\n&#x2F;&#x2F;        &#x2F;&#x2F; 1. 导入相关驱动\n&#x2F;&#x2F;        Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);\n\n        &#x2F;&#x2F;2. 创建相关连接\n        String url &#x3D; &quot;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;jdbc_demo&quot;;\n        String userName &#x3D; &quot;root&quot;;\n        String password &#x3D; &quot;Sxs12367&quot;;\n        Connection connection &#x3D; DriverManager.getConnection(url, userName, password);\n\n        &#x2F;&#x2F;3. 编写相关查询语句\n        String sql1 &#x3D; &quot;create TABLE table_demo(\\n&quot; +\n                &quot;    id int primary key ,\\n&quot; +\n                &quot;    name varchar(10) not null ,\\n&quot; +\n                &quot;    money int\\n&quot; +\n                &quot;);&quot;;\n        String sql2 &#x3D;&quot;drop TABLE  table_demo;&quot;;\n\n        &#x2F;&#x2F;4. 由相关连接创建一个相关查询(新建查询)\n        Statement statement &#x3D; connection.createStatement();\n\n        try &#123;\n            &#x2F;&#x2F;开启事务\n            connection.setAutoCommit(false);\n\n            statement.executeUpdate(sql1);\n            statement.executeUpdate(sql2);\n            &#x2F;&#x2F;提交事务\n            connection.commit();\n\n        &#125;catch (Exception e)&#123;\n            &#x2F;&#x2F;回滚事务\n            connection.rollback();\n            System.out.println(&quot;回滚事务&quot;);\n        &#125;\n\n\n        &#x2F;&#x2F;6. 释放内存\n        connection.close();\n        statement.close();\n    &#125;\n&#125;</code></pre>\n</li>\n<li><p><code>Statement</code>返回值处理</p>\n<p>如果是处理DML语言, 就是对数据进行增删改操作时, 如果成功返回值是大于0的, 可以通过此判断, 但是如果是DDL, 就是对数据库或者表的元素的增删改, 他的值即使成功也有可能为0, 判断方法是不报错就是成功. </p>\n</li>\n<li><p><code>Statement</code>查询语句处理</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class JDBCDemo &#123;\n\n    public static void main(String[] args) throws Exception &#123;\n\n&#x2F;&#x2F;        &#x2F;&#x2F; 1. 导入相关驱动\n&#x2F;&#x2F;        Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);\n\n        &#x2F;&#x2F;2. 创建相关连接\n        String url &#x3D; &quot;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;jdbc_demo&quot;;\n        String userName &#x3D; &quot;root&quot;;\n        String password &#x3D; &quot;Sxs12367&quot;;\n        Connection connection &#x3D; DriverManager.getConnection(url, userName, password);\n\n        Statement statement &#x3D; connection.createStatement();\n\n        String sql &#x3D; &quot;select * from table_demo;&quot;;\n        &#x2F;&#x2F;注意, DQL语句的方法和其他方法不一样, 会返回一个ResultSet类型的查询结果\n        ResultSet resultSet &#x3D; statement.executeQuery(sql);\n\n        &#x2F;&#x2F;.next()返回下一行是否不为空, 并将指针移动到下一行, 一开始在第一行数据的上一行\n        while (resultSet.next())&#123;\n\n            &#x2F;&#x2F; 用getxxx的方法获取数据, 参数可以填列数, 也可以填列名, 注意! 列数从1开始\n            System.out.println(resultSet.getInt(1));\n            System.out.println(resultSet.getString(2));\n            System.out.println(resultSet.getInt(&quot;money&quot;));\n            System.out.println(&quot;-----------------&quot;);\n        &#125;\n\n\n        &#x2F;&#x2F;6. 释放内存, 注意要释放掉resultSet的内存\n        resultSet.close();\n\n\n        connection.close();\n        statement.close();\n    &#125;\n&#125;</code></pre></li>\n</ol>\n<div class=\"custom-quote warning\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12 8V13\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12 15.99V16.01\"></path>\n</svg>\n</span>\n<p class=\"custom-quote-title\">注意</p>\n<p><p>实际业务中我们并不是直接处理数据, 而是要把它封装在一个实体类, 并装入一个列表中使用的, 代码展示入下</p>\n</p>\n</div>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package com.myCompany.pojo;\n\npublic class User &#123;\n\n    private int id;\n    private String name;\n    private int money;\n\n    public User(int id, String name, int money) &#123;\n        this.id &#x3D; id;\n        this.name &#x3D; name;\n        this.money &#x3D; money;\n    &#125;\n\n    @Override\n    public String toString() &#123;\n        return &quot;User&#123;&quot; +\n                &quot;id&#x3D;&quot; + id +\n                &quot;, name&#x3D;&#39;&quot; + name + &#39;\\&#39;&#39; +\n                &quot;, money&#x3D;&quot; + money +\n                &#39;&#125;&#39;;\n    &#125;\n&#125;</code></pre>\n\n<p>​\t\t</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">String sql &#x3D; &quot;select * from table_demo;&quot;;\n&#x2F;&#x2F;注意, DQL语句的方法和其他方法不一样, 会返回一个ResultSet类型的查询结果\nResultSet resultSet &#x3D; statement.executeQuery(sql);\n\n&#x2F;&#x2F;.next()返回下一行是否不为空, 并将指针移动到下一行, 一开始在第一行数据的上一行\nList&lt;User&gt; list &#x3D; new ArrayList&lt;User&gt;();\nwhile (resultSet.next())&#123;\n\n    &#x2F;&#x2F; 用getxxx的方法获取数据, 参数可以填列数, 也可以填列名, 注意! 列数从1开始\n    User user &#x3D; new User(resultSet.getInt(&quot;id&quot;), resultSet.getString(&quot;name&quot;), resultSet.getInt(&quot;money&quot;));\n    list.add(user);\n&#125;\n\nfor (User user : list) &#123;\n    System.out.println(user);\n&#125;</code></pre>\n\n<pre class=\"line-numbers language-text\" data-language=\"text\"><code class=\"language-text\">User&#123;id&#x3D;1, name&#x3D;&#39;张三&#39;, money&#x3D;100&#125;\nUser&#123;id&#x3D;2, name&#x3D;&#39;李四&#39;, money&#x3D;200&#125;\nUser&#123;id&#x3D;3, name&#x3D;&#39;王五&#39;, money&#x3D;300&#125;\nUser&#123;id&#x3D;4, name&#x3D;&#39;赵六&#39;, money&#x3D;400&#125;\nUser&#123;id&#x3D;5, name&#x3D;&#39;刘能&#39;, money&#x3D;500&#125;\n</code></pre>\n\n<div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">提示</p>\n<p>一个绝妙的, 字符串合并的方法, 如下</p>\n\n</div>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">String x1 &#x3D; &quot;一段话&quot;;\nString x2 &#x3D; &quot;插入&quot;;\nString x3 &#x3D; &quot;完整&quot;;\n\n&#x2F;&#x2F;这是要达到的结果\nString x &#x3D; &quot;这是一段话, 我要进行一些插入, 让这句话显得完整&quot;;\n\n&#x2F;&#x2F;先这样写,在需要插入的地方写&#39;&#39;\nString m &#x3D; &quot;这是&#39;&#39;, 我要进行一些&#39;&#39;, 让这句话显得&#39;&#39;&quot;;\n\n&#x2F;&#x2F;然后依次添加 &quot;+String+&quot;\n\nm &#x3D; &quot;这是&#39;&quot;+x1+&quot;&#39;, 我要进行一些&#39;&quot;+x2+&quot;&#39;, 让这句话显得&#39;&quot;+x3+&quot;&#39;&quot;;</code></pre>\n\n\n\n<div class=\"custom-quote danger\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M19.76 5.23C15.84 5.23 12 2 12 2C12 2 8.15996 5.23 4.23996 5.23C4.23996 5.23 1.86996 16.99 12 22C22.13 16.99 19.76 5.23 19.76 5.23Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12 8V13\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 16H12\"></path>\n</svg>\n</span>\n<p class=\"custom-quote-title\">特别注意</p>\n<p><p>要小心sql注入, 就是输入的数据经过处理之后影响到查询语句, 我们必须要用</p>\n<p>我们就放弃<code>Statement</code>了, 以后都用<code>PreoaredStatment</code></p>\n</p>\n</div>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;&#x2F;sql命令变量用 ? 代替\nString sql &#x3D; &quot;select name from table_demo where id &#x3D; ?;&quot;;\nint id &#x3D; 1;\n\n&#x2F;&#x2F;传入sql语句\nPreparedStatement preparedStatement &#x3D; connection.prepareStatement(sql);\n&#x2F;&#x2F;设置变量值, 排序还是从1开始\npreparedStatement.setInt(1, id);\n\n&#x2F;&#x2F;注意不需要再传多余的sql语句了\nResultSet resultSet &#x3D; preparedStatement.executeQuery();</code></pre>\n\n<p>预编译性能更高, 所以用就完事了. 注意后面添加的参数, 添加参数要用<code>?</code>分割, 每个参数之间用<code>&amp;</code>连接</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">String url &#x3D; &quot;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;jdbc_demo?useServerPrepStmts&#x3D;true&quot;;</code></pre>\n\n<h2 id=\"数据库连接池\"><a href=\"#数据库连接池\" class=\"headerlink\" title=\"数据库连接池\"></a>数据库连接池</h2><p>这个就不做过多展开, 留一个<a href=\"https://www.bilibili.com/video/BV1Qf4y1T7Hx?p=38&vd_source=79f488fa065eee08ba72fa4d2ffc9a26\">学习传送门</a>吧</p>\n<div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">提示</p>\n<p>alt + 鼠标左键 可以实现列编辑</p>\n<p>ctrl + alt + l 格式化</p>\n\n</div>\n","feature":true,"text":"数据库设计一对一一般用于表拆分, 一张用于常用查询, 一张用于非常用查询, 通过设置唯一外键实现 一对多设置外键, 多的一放设置外键, 指向一的一放的主键. 多对多设置另一张表, 包含两个外键, 包含两个表的两个主键. 多表查询select 字段列表 from 表 where 字...","link":"","photos":[],"count_time":{"symbolsCount":"8.1k","symbolsTime":"7 mins."},"categories":[{"name":"Study","slug":"Study","count":13,"path":"api/categories/Study.json"}],"tags":[{"name":"MySql","slug":"MySql","count":1,"path":"api/tags/MySql.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1\"><span class=\"toc-text\">数据库设计</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%80%E5%AF%B9%E4%B8%80\"><span class=\"toc-text\">一对一</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%80%E5%AF%B9%E5%A4%9A\"><span class=\"toc-text\">一对多</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%A4%9A%E5%AF%B9%E5%A4%9A\"><span class=\"toc-text\">多对多</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A2\"><span class=\"toc-text\">多表查询</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8D%95%E8%A1%8C%E5%8D%95%E5%88%97\"><span class=\"toc-text\">单行单列</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%A4%9A%E5%88%97%E5%8D%95%E8%A1%8C\"><span class=\"toc-text\">多列单行</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%A4%9A%E8%A1%8C%E5%A4%9A%E5%88%97\"><span class=\"toc-text\">多行多列</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%86%85%E8%BF%9E%E6%8E%A5\"><span class=\"toc-text\">内连接</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#JDBC\"><span class=\"toc-text\">JDBC</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AF%BC%E5%85%A5JDBC\"><span class=\"toc-text\">导入JDBC</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0\"><span class=\"toc-text\">数据库连接池</span></a></li></ol>","author":{"name":"Someone Serious","slug":"blog-author","avatar":"/img/photo.jpg","link":"/","description":"here is someone serious <br />只是一个小学生, 学艺不精多多见谅","socials":{"github":"https://github.com/Some1Serious","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"QQ":{"icon":"/svg/QQ.svg","link":"/img/myQQ.png"},"Email":{"icon":"/svg/email-fill.svg","link":"mailto:1025698918@qq.com"}}}},"mapped":true,"prev_post":{"title":"C study day01","uid":"f8bddff16c64cf44d055f0f968e054f2","slug":"C/C-study-day01","date":"2022-11-14T14:44:27.000Z","updated":"2022-11-15T11:43:48.777Z","comments":true,"path":"api/articles/C/C-study-day01.json","keywords":null,"cover":"/img/C.jpg","text":"我觉得C语言足够难, 够我开一个档来学习, 但是我今天学C的目的是为了完成我的实验, 所以实验结束之后我估计就会搁置C一段时间. 学习传送门 留着学吧, ","link":"","photos":[],"count_time":{"symbolsCount":78,"symbolsTime":"1 mins."},"categories":[{"name":"Study","slug":"Study","count":13,"path":"api/categories/Study.json"}],"tags":[{"name":"C","slug":"C","count":1,"path":"api/tags/C.json"}],"author":{"name":"Someone Serious","slug":"blog-author","avatar":"/img/photo.jpg","link":"/","description":"here is someone serious <br />只是一个小学生, 学艺不精多多见谅","socials":{"github":"https://github.com/Some1Serious","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"QQ":{"icon":"/svg/QQ.svg","link":"/img/myQQ.png"},"Email":{"icon":"/svg/email-fill.svg","link":"mailto:1025698918@qq.com"}}}},"feature":false},"next_post":{"title":"Java web Study day01","uid":"a87786c9ccb2deebec2cb0b25e4021c7","slug":"javaWeb/Java-web-Study-day01","date":"2022-11-13T10:49:34.000Z","updated":"2022-11-14T11:34:10.214Z","comments":true,"path":"api/articles/javaWeb/Java-web-Study-day01.json","keywords":null,"cover":"/img/javaWeb.png","text":"黑马程序员新版JavaWeb基础教程，Java web从入门到企业实战完整版_哔哩哔哩_bilibili 喂喂喂听得到吗! 今天想看电影, 没人陪我看, 真tmd, 我感觉要学的东西快学不完了, G! 我的mysql的服务器创建了, 账号为root, 密码为S 不行了, 洗个衣服...","link":"","photos":[],"count_time":{"symbolsCount":161,"symbolsTime":"1 mins."},"categories":[{"name":"Study","slug":"Study","count":13,"path":"api/categories/Study.json"}],"tags":[{"name":"javaWeb","slug":"javaWeb","count":1,"path":"api/tags/javaWeb.json"}],"author":{"name":"Someone Serious","slug":"blog-author","avatar":"/img/photo.jpg","link":"/","description":"here is someone serious <br />只是一个小学生, 学艺不精多多见谅","socials":{"github":"https://github.com/Some1Serious","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"QQ":{"icon":"/svg/QQ.svg","link":"/img/myQQ.png"},"Email":{"icon":"/svg/email-fill.svg","link":"mailto:1025698918@qq.com"}}}},"feature":true}}