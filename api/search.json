[{"id":"f9ae6417e6d1f674d9c49adb056f5b6c","title":"Spring Study day01","content":"学习传送门\n首先明确: spring是为了使项目更加简便而设计的\n\n\n\n\n\n\n提示\nGA版本是稳定版\nSNAPSHOT是快照版\n\n\nSpring项目的创建使用maven, 先创建一个最基本的spring框架:\n写一个类的方法\npackage com.myCompany.helloWorld;\n\nimport javax.xml.bind.annotation.adapters.XmlJavaTypeAdapters;\nimport java.sql.SQLOutput;\nimport org.junit.Test;\n\npublic class User &#123;\n\n    public void helloWorld()&#123;\n        System.out.println(&quot;helloWorld&quot;);\n    &#125;\n\n&#125;\n\n写一个测试类\npackage com.myCompany.helloWorld;\n\nimport org.junit.Test;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\n\npublic class TestRun &#123;\n\n    @Test\n    public void test()&#123;\n\n        ApplicationContext applicationContext &#x3D; new ClassPathXmlApplicationContext(&quot;bean1.xml&quot;);\n\n        User user &#x3D; applicationContext.getBean(&quot;user&quot;, User.class);\n        System.out.println(user);\n        user.helloWorld();\n\n    &#125;\n\n&#125;\n\n\n在main下创建一个resources资源文件夹, 存放xml文件, 在xml文件中创建bean\n&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;\n       xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;\n       xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans.xsd&quot;&gt;\n\n    &lt;bean id&#x3D;&quot;user&quot; class&#x3D;&quot;com.myCompany.helloWorld.User&quot;&gt;&lt;&#x2F;bean&gt;\n&lt;&#x2F;beans&gt;\n\n然后运行测试类就可以了\n洗澡去了, 人要馊掉了\n\nIOC容器降低耦合, 将创建新的实体类的任务交给spring, 就是IOC, 上面的实践就是IOC\n它包括:\n1. xml解析\n1. 工厂模式\n1. 反射\n\n反射内容不一定和反射有关, 毕竟这也不是什么专业报告, 而是我的学习日记\njava关于类的初始化:\n类并不是在java项目启动时就全部初始化的, 而是动态的, 在调用到它时才初始化, 初始化便是将类方法中的所有静态的方法启动(构造方法当然也算静态方法, 即使它没有static关键字)\n看下面的代码:\npublic class Initable &#123;  \n    static final int staticFinal &#x3D; 47;  \n    static final int staticFianl2 &#x3D; ClassInitialization.rand.nextInt(1000); \n    static int notFinal &#x3D; 12;\n    static &#123;  \n        System.out.println(&quot;Initializing Initable&quot;);  \n    &#125;  \n&#125;\n\n像staticFinal属于编译期常量, 调用它不需要将类初始化, 注意, 必须要有final成为常量\n像第二三种就必须要初始化才可以调用了, 一旦初始化, 就会启动最后的打印方法\n而调用class.forName可以主动将类加载到内存中 , 主动初始化. \n\nIOC接口\nBeanFactory: IOC开发人员用的底层的, 功能更少, 咱们最好不要用\nApplicationContext: 给你用的, 用就完事了.\n\n\n\n\n\n\n\n提示\nctrl + h 可以打开类的关系图\n\n\n\n这两个方法都可以得到创建xml对象\nFileSystemXmlApplicationContext输入的是绝对路径\nClassPathXmlApplicationContext输入的是在src下的相对路劲, 但是我这里好像有点问题, 建议是在main下, 建立一个resouces文件夹, 这个方法也可以直接导航到该目录下\n创建对象之后的注入属性xml配置无参构造set的方法:创建一个类:\npublic class User &#123;\n\n    private int x;\n    private String str;\n\n    private other o;\n\n    public void setO(other o) &#123;\n        this.o &#x3D; o;\n    &#125;\n\n    public void setX(int x) &#123;\n        this.x &#x3D; x;\n    &#125;\n\n    public void setStr(String str) &#123;\n        this.str &#x3D; str;\n    &#125;\n\n    public void helloWorld()&#123;\n        System.out.println(&quot;helloWorld int x &#x3D; &quot; + x + &quot;, str &#x3D; &quot; + str);\n        System.out.println(&quot;the other class : &quot; + o);\n        System.out.println(x + 1);\n    &#125;\n\n\n&#125;\n\n他的配置文件 \n    &lt;bean id&#x3D;&quot;s&quot; class&#x3D;&quot;com.myCompany.helloWorld.other&quot;&#x2F;&gt;\n    &lt;bean id&#x3D;&quot;user&quot; class&#x3D;&quot;com.myCompany.helloWorld.User&quot;&gt;\n        &lt;property name&#x3D;&quot;x&quot; value&#x3D;&quot;1&quot;&#x2F;&gt;\n        &lt;property name&#x3D;&quot;str&quot; value&#x3D;&quot;str&quot;&#x2F;&gt;\n\n\n&lt;!--        这里引用了s类, 用ref的方法.--&gt;\n        &lt;property name&#x3D;&quot;o&quot; ref&#x3D;&quot;s&quot;&#x2F;&gt;\n    &lt;&#x2F;bean&gt;\n\n有参构造的xml方法:类文件:\npublic class User &#123;\n\n    private int x;\n    private String str;\n\n    private other o;\n\n    public User(int x, String str, other o) &#123;\n        this.x &#x3D; x;\n        this.str &#x3D; str;\n        this.o &#x3D; o;\n    &#125;\n\n    public void helloWorld()&#123;\n        System.out.println(&quot;helloWorld int x &#x3D; &quot; + x + &quot;, str &#x3D; &quot; + str);\n        System.out.println(&quot;the other class : &quot; + o);\n        System.out.println(x + 1);\n    &#125;\n\n\n&#125;\n\n配置文件:\n&lt;!--    注意这里创建了一个s类--&gt;\n    &lt;bean id&#x3D;&quot;s&quot; class&#x3D;&quot;com.myCompany.helloWorld.other&quot;&#x2F;&gt;\n    &lt;bean id&#x3D;&quot;user&quot; class&#x3D;&quot;com.myCompany.helloWorld.User&quot;&gt;\n        &lt;constructor-arg name&#x3D;&quot;o&quot; ref&#x3D;&quot;s&quot;&#x2F;&gt;\n        &lt;constructor-arg name&#x3D;&quot;str&quot; value&#x3D;&quot;string&quot;&#x2F;&gt;\n        &lt;constructor-arg name&#x3D;&quot;x&quot; value&#x3D;&quot;123&quot;&#x2F;&gt;\n    &lt;&#x2F;bean&gt;\n\np方式注入我就提个名字, 想用的话百度吧. \n配置文件特殊用法\n设置空值\n&lt;constructor-arg name&#x3D;&quot;str&quot;&gt;\n    &lt;null&#x2F;&gt;\n&lt;&#x2F;constructor-arg&gt;\n\n用property同理\n\n如果遇到xml会解析到的特殊符号怎么办, 比如&lt;&gt;,可以用转义符号&amp;lt, &amp;gt为**&lt;&gt;**\n&amp;quot为**”**\n&lt;constructor-arg name&#x3D;&quot;str&quot; &gt;\n    &lt;!--字符串写在&quot;CDATA[&quot;后--&gt;   \n    &lt;value&gt;&lt;![CDATA[&lt;String&gt;]]&gt;&lt;&#x2F;value&gt;\n&lt;&#x2F;constructor-arg&gt;\n\n使用内部bean赋值\n&lt;constructor-arg name&#x3D;&quot;str&quot; &gt;\n    &lt;bean id &#x3D; &quot;&quot; class &#x3D; &quot;&quot;&gt;\n    &lt;!--进行内部bin的赋值, property同理--&gt;\n    &lt;&#x2F;bean&gt;\n&lt;&#x2F;constructor-arg&gt;\n\n级联赋值\n其实就是通过ref调用外部bean.\n\n\nIOC与DI​\t\n","slug":"springBoot/Spring-Study-day01","date":"2022-11-12T06:33:30.000Z","categories_index":"Study","tags_index":"Spring","author_index":"Someone Serious"},{"id":"76ec667c92deac2437fb208989cf59f5","title":"Maven res 01 HelloWorld","content":"学习传送门\n目的描述​\t1. 创建一个Maven项目, 其中包括父类 maven_parent, 以及他的三个子模块maven_dao, maven_service, maven_controller\n​\t2. 三个子模块的用途与依赖关系\n\n\n\n\nmaven_dao\nmaven_service\nmaven_controller\n\n\n\n简述\n数据库访问层\n项目业务逻辑层\n接受请求,相应数据\n\n\n模板\nquickstart\nquickstart\nwebapp\n\n\n依赖\n\nmaven_dao\nmaven_serviceservlet\n\n\n插件\n\n\ntomcat\n\n\n\n实现过程创建项目\n选择模板项目, 更改项目名称\n\n更改项目ID, 然后刷新Maven\n\n新建模块时注意填写Maven模板\n\n添加依赖\nmaven_dao中的方法\n\n向service中添加dao的依赖, 注意图中的写法\n\n编写service方法, 并引用maven_dao中的方法\n\nmaven_controller方法需要载入插件servlet, 然后实现其中的方法, 超入插件的方法如下:\n\n搜索mvn, 进入Maven库官网, 然后搜索对应的插件, 以及版本, 如果不知道用什么版本, 看人数最多的就可以了.\n\n\n复制代码到pom.xml下\n\n创建servlet类, 重写它的方法, servlet我还没有学, 之后可能会写详细说明\n\n\n然后还要依赖maven_service, pom.xml如下:\n&lt;!-- https:&#x2F;&#x2F;mvnrepository.com&#x2F;artifact&#x2F;javax.servlet&#x2F;javax.servlet-api --&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;javax.servlet&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;javax.servlet-api&lt;&#x2F;artifactId&gt;\n    &lt;version&gt;3.1.0&lt;&#x2F;version&gt;\n    &lt;scope&gt;provided&lt;&#x2F;scope&gt;\n&lt;&#x2F;dependency&gt;\n\n&lt;dependency&gt;\n    &lt;artifactId&gt;maven_service&lt;&#x2F;artifactId&gt;\n    &lt;groupId&gt;com.myCompany&lt;&#x2F;groupId&gt;\n    &lt;version&gt;1.0-SNAPSHOT&lt;&#x2F;version&gt;\n&lt;&#x2F;dependency&gt;\n\n代码重写servlet方法:\n首先发现在controller下没有java这个包, 所以我们要手动创建:\n\n重写方法:\n@WebServlet(&quot;&#x2F;user&quot;)\npublic class UserServlet extends HttpServlet &#123;\n\n    @Override\n    protected void service(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;\n        System.out.println(&quot;myServlet complete...&quot;);\n        \n        &#x2F;&#x2F;调用service中的方法:\n        useDao.use_dao();\n    &#125;\n&#125;\n\n\n想要运行的话还是要添加jetty或者tomcat的插件打开服务器, 插件添加在&lt;plugins&gt;下方, 而它又放在&lt;bulid&gt;的下方\ntomcat的插件去tomcat的官网下载:插件官网\n&lt;plugin&gt;\n    &lt;groupId&gt;org.apache.tomcat.maven&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;tomcat6-maven-plugin&lt;&#x2F;artifactId&gt;\n    &lt;version&gt;2.2&lt;&#x2F;version&gt;\n    &lt;configuration&gt;\n        &lt;hostName&gt;localhost&lt;&#x2F;hostName&gt;        &lt;!--   Default: localhost --&gt;\n        &lt;port&gt;8080&lt;&#x2F;port&gt;                     &lt;!-- 启动端口 Default:8080 --&gt;\n        &lt;path&gt;&#x2F;tomcat&lt;&#x2F;path&gt;   &lt;!-- 访问应用路径  Default: &#x2F;$&#123;project.artifactId&#125;--&gt;\n        &lt;uriEncoding&gt;UTF-8&lt;&#x2F;uriEncoding&gt;      &lt;!-- uri编码 Default: ISO-8859-1 --&gt;\n    &lt;&#x2F;configuration&gt;\n&lt;&#x2F;plugin&gt;\n\n如何使用tomcat启动服务器:\n\n\n注意添加命令, 然后更改下列属性\n\n在启动之前需要将项目打包, 生成target文件\n\n\n\n\n\n\n\n\n注意\n第一次构建项目的时候, 一定要先构建父类, 然后再点击按钮构建项目\n\n\n\n然后我们就运行成功了!\n\n\n\nTheEND","slug":"Maven/Maven-res-01","date":"2022-11-12T03:14:14.000Z","categories_index":"Result","tags_index":"Maven","author_index":"Someone Serious"},{"id":"c2a9e80eefc355aef707e141e0e47a0d","title":"Maven-Study-day01","content":"学习传送门\nMaven帮助我们下载管理依赖的包&lt;dependency&gt;\n    &lt;groupId&gt;com.alibaba&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;druid-spring-boot-starter&lt;&#x2F;artifactId&gt;\n    &lt;version&gt;$&#123;druid.version&#125;&lt;&#x2F;version&gt;\n&lt;&#x2F;dependency&gt;\n\ngroupId: 实际的包的仓库路径, 也就是实际项目公司名称\nartifaceId: 实际项目中的一个Maven模块(项目名), \nversion: 版本\n\n统一jar包依赖\n统一项目目录结构\n一致构建模型插件机制\n\nMaven的统一项目结构\n在若依项目中的体现:\n\npom.xml是用来存放所有的依赖jar包和插件的\n至于pom.xml中的标签含义, 有一个超级pom中包含所有标签, 就在 传送门下面的POM标签大全详解里. \nMaven设置的xml与包路径设置\n在xml中设置包路径如下图, 其中注意是用 /而不是\\\n&lt;!-- 下载包的地址 --&gt;\n&lt;localRepository&gt;D:&#x2F;repository&lt;&#x2F;localRepository&gt;\n\n还可以设置阿里云的镜像, 因为maven的服务器在国外, 下载很慢, 所以设置阿里的镜像会快一点\n&lt;mirrors&gt;\n    &lt;mirror&gt;\n        &lt;id&gt;alimaven&lt;&#x2F;id&gt;\n        &lt;name&gt;aliyun maven&lt;&#x2F;name&gt;\n        &lt;url&gt;http:&#x2F;&#x2F;maven.aliyun.com&#x2F;nexus&#x2F;content&#x2F;groups&#x2F;public&#x2F;&lt;&#x2F;url&gt;\n        &lt;mirrorOf&gt;central&lt;&#x2F;mirrorOf&gt;\n    &lt;&#x2F;mirror&gt;\n&lt;&#x2F;mirrors&gt;\n\n\n\n下面是创建Maven的过程\n其中archetype是指Maven的模板, 一般选择quickstart就行了, 有特殊需要再更换, 选错了不影响.\n\n更改图中的设置\n\n从图中的按钮处可以进入如图的页面, 进入该页面后可以输入相关命令, 方便执行. 执行的话就点击执行就可以了. \n插件放在:\n&lt;bulid&gt;\n\t&lt;plugins&gt;\n\t\t&lt;plugin&gt;\n            &lt;!--插件放在这里--&gt;\n        &lt;&#x2F;plugin&gt;\n    &lt;&#x2F;plugins&gt;\n&lt;&#x2F;bulid&gt;\n\nweb项目的话, 用jetty(轻量级快速)或者tomcat插件\n在Maven中插件导入\n更改一下Maven中的配置\n在启动项选择中加入启动命令\n启动\n\n\n\n\n\n\n\n\n\n注意\n不行了, 跑步去了, 感觉要烂在椅子上了, 学习使我充实, 也使我疲倦. \n\n\n\n虽然已经是第二天了, 但是这是我既定的一天的学习内容, 所以仍然放在这篇博客. \nMaven仓库类型1. 中央仓库服务器在国外, 是Maven的主要仓库, 默认下载仓库\n2. 本地仓库下载完成之后就存放在本地仓库, 每一个本地项目都从本地仓库中找, 找不到就去中央仓库中下载\n3. 私服局域网中的仓库, 一般在公司中使用, 更快的下载Maven插件\n4. 其他仓库比如国内的阿里云镜像, 是中央仓库与私服的折中选择. \nMaven中创建子模块在父模块的目录上, 右键点击新模块. 而父模块的创建不需要选择Maven模板. \n\n实战实战传送门","slug":"Maven/Maven-Study-day01","date":"2022-11-11T08:41:35.000Z","categories_index":"Study","tags_index":"Maven","author_index":"Someone Serious"},{"id":"48f7fbdaf0e0dd4f6b63c39c2a27cf68","title":"springBoot-Study-day01","content":"先去学习Maven了, 真的和多米诺骨牌一样, 发现自己球也不懂.\n","slug":"springBoot/springBoot-Study-day01","date":"2022-11-11T08:23:35.000Z","categories_index":"Study","tags_index":"springBoot","author_index":"Someone Serious"},{"id":"307d6666c3d0b32790212432c57158e1","title":"RuoYi-frame-学习-day03","content":"\n\n\n\n\n\n\n特别注意\n今天不想学习, 只想摆烂, 接下来我要记录一下我打的几把联盟的战绩, 计算了一下, 从我第一天搭建博客, 到现在, 从上周五(4号)到今天, 已经猛干了五天了, 顶不住了. 我们要休息! 我们要争取八小时工作制!\n\n\n我莫甘娜追着豹女跑, 豹女硬顶着我的伤害把基地干爆了, TMD\n我已经放弃学习若依了, 选去搞springBoot","slug":"Ruoyi/RuoYi-frame-学习-day03","date":"2022-11-09T05:12:35.000Z","categories_index":"Study","tags_index":"RuoYi","author_index":"Someone Serious"},{"id":"95d3c68757bee3f9c7ba7e266dc65367","title":"RuoYi frame 学习 day01","content":"\n\n\n\n\n\n\n注意\n今天进入若依框架的学习, 为了天杀的实践课, 这个Guns是真该死啊\n\n首先我们需要一个传送门\n若依前后端分离版主要业务是权限管理系统, 简单易上手, 新手专用开源项目, 练手完美, 还有网课, 真是nice的不要不要的.\n首先就需要框架搭建若依传送门\n\n\n\n\n\n\n\n注意\n基础: SpringBoot + Vue\n\n真是草了, 算了springBoot之后再学, 先搞这个.\n所谓前后端分离, 当然要前端和后端分别打开\n要学的东西是真tmd多啊, 我还要搞\n\nmysql配置\nnavicat使用\nspringboot\nvue\n方便的插入图片\n\n至少第五点已经有解决方案了\n图片解决方案 -&gt; 传送门我感觉一切尽在掌握, 可是我该去吃饭了\n图片的问题已经解决了一半了通过导入插件的办法, 已经可以用如下的代码来解决图片插入的问题, 但是我们还要更换软件, 让插入图片更加舒畅.\n![](img1.png)\n\n我们就要用到 Typora 应用了, vscode 886.\n图片的问题解决了, 只不过最后要通过ctrl + f替换掉所有的题目&#x2F;\n\nmysql配置\n若依数据库配置\n设置url, 用户名,和密码, 说实话, 我这个数据库属实不太会用.\n除了需要配置mysql, 还需要配置Redis 它是另外一款数据库, 现在的我还不明白为什么需要两个数据库, 我现在博客写的这么意识流到底好不好啊?\n安装Redis还要用到虚拟机和Linux, 我的心态要崩了, 东西越学越多, 我真是操了.\nRedis Windows系统的管理器传送门\n还是得要在Linux上使用Redis真是草了, 但是今天的学习也就到这里了. 碎觉去了.\n\n现在已经第二天了, 但是鉴于昨天学的东西并不是很多, 所以我还是在这个post里继续写下去, 我在想是不是要另外开一个档用来存放干活而不是废话. 把这个当成学习日记算了, 这个Study分类就用来一边学习一边摸鱼吧. \n若依启动方式首先前后端都要打开前端就是ruoyi-ui 后端就是总项目里面的ruoyi-admin下面的RuoYiApplication\n启动后端前, 要先注意把数据库和redis都打开, redis启动就直接在resp中运行就可以了, 数据库在idea里面也可以启动. \n\nruoyi-ui下的src下的views下的index.vue是首页的内容. \n\n\n\n\n\n\n提示\n目录页面查找是通过数据库sys_menu来查找的, 里面有它的根目录\n\n\n\nEND今天只能学到这里了, 虽然说是一天, 但实际上是两天, 好啦 886\n","slug":"Ruoyi/RuoYi-frame-学习-day01","date":"2022-11-07T08:03:31.000Z","categories_index":"Study","tags_index":"RuoYi","author_index":"Someone Serious"},{"id":"a9e4774d724b74fc9dfb730280d107de","title":"Markdown Study day 02","content":"第二天起床再写今天晚上先把上传搞好\ntips: 明天改这个图像的BUG修改BUG日志: 好像好了, 又好像没好.\n起床啦建立表格我们需要用---来分割每列的标题, 然后用|来分割每列, 让我来试一下.\n\n\n\n正数\n负数\n0\n\n\n\n大于0的数\n小于0的数\n0\n\n\n|正数 | 负数 | 0 |\n|-----|------|--|\n|大于0的数|小于0的数|0|\n\n但是这样的代码又麻烦又丑, 于是我们必须要一个传送门  \n\n\n\n哺乳动物\n两栖动物\n爬行动物\n\n\n\n人类\n青蛙\n蜥蜴\n\n\n我的评价是, 还可以, 但不是太可以\n脚注不想学, 不好用\n标题编号tip: 我刚刚换了一个md的查看模组, 这个默认的模组很多语法都不识别.\n那么我这个标题编号的标题已经添加了标题编号方法如下\n## 标题编号\n\n    [Heading IDs](#heading-ids)\n\n然后就可以超链接过去了我把标题编号删了, 因为我发现系统会自动添加标题编号, 编号就是标题名称.链接到起床了感觉用起来还不错\n定义列表效果展示:  \n这是一个列表头: stuff1: stuff2stuff3这是下一个列表头: stuff1: stuff2stuff3这是一个列表头\n: stuff1\n: stuff2\n: stuff3\n\n这是下一个列表头\n: stuff1\n: stuff2\n: stuff3\n\n我的评价是: 捞的么淌口水\n删除线这个功能已经不被需要了, kill!\n~~这个功能已经不被需要了~~\n\n我很想知道快速创建代码块围栏的快捷键, 一个一个敲太麻烦了.装载了一个markdown shortcut 又有一堆指令要学习, 怎么感觉又麻烦了起来  !!!∑(ﾟДﾟノ)ノ\n任务列表语法- [x] Write the press release\n- [ ] Update the website\n- [ ] Contact the media\n\n\n Write the press release\n Update the website\n Contact the media\n\nmarkdown快捷键这里我想粘贴一张图片\n\n\n注意这里我没有使用markdown的语法, 我使用了hexo的语法\nhexo粘贴图片首先配置文件要先打开图片  \n_config.yml\npost_asset_folder: true\n\n然后把图片放在和post同名的文件夹下, 然后使用以下的命令\n&#123;% asset_img slug page1.png %&#125;\n&#x2F;&#x2F;注意, 这里的图片名字为 page1.png\n\n然后其他需要被引用到的元素都可以用hexo来解决解决的方法是通过传送门\n现在已经九点半了, 一会去上课, 晚上接着写这个GitHub的网络真的很不稳定\n上完课了, 晚上还要上选修课, 真tmd\n表情我觉得使用基本颜文字就可以了, 这个markdown表情感觉有点捞的不谈:imp::imp::imp:\n这里我们需要一张图片和一个传送门\n\n\n好啦! 这个markdown学完啦我们还可以继续学习这个模板的特殊语法语法很简单\n\n\n\n\n\n\n提示\n这是一个tip\n\n:::tip\n这是一个tip\n:::\n\n\n\n\n\n\n\n\n注意\n这是一个warning!!!\n\n:::warning\n这是一个warning!!!\n:::\n\n\n\n\n\n\n\n\n特别注意\n这是一个Danger!!!\n\n:::danger\n这是一个Danger!!!\n:::\n\n\nClick to see more\n点一个按钮可以看更多, 真是有够骚  \n\ndetails content\ndetails new line\n\nconsole.log(&#39;hello world&#39;)\n\n\n\n\n:::details Click to see more\n\ndetails\n\n- details content\n- details new line\n\n~~~javascript\nconsole.log(&#39;hello world&#39;)\n~~~\n\n:::\n\n\nEND结束了\nmarkdown就算彻底学完啦\n","slug":"mark/Markdown-Study-day-02","date":"2022-11-07T00:36:21.000Z","categories_index":"Study","tags_index":"Markdown","author_index":"Someone Serious"},{"id":"e9beb6261539d5bfbef19aa72e68381a","title":"Markdown Study day 01","content":"这是我的第一篇博客 (^▽^)进入Markdown学习众所周知Markdown是一款轻量级的语言，用于…后面的废话就不用说了，搞得跟真的一样。据说能在半个小时内掌握,我信他个鬼.(ｰ̀дｰ́)\n粘贴一个学习网址 https://markdown.com.cn/basic-syntax/\n\n使用标题就是通过前方加#的方式  \n # 一级标题\n## 二级标题\n### 三级标题\n\n段落前不要加双空格,没有用的,而且也没有必要(当然,我写这些有的没的tips其实还是在间接锻炼我的打字速度和使用Markdown的能力)\n\n换行可以加一个&lt;br&gt;或者加两个空格然后回车(注意区别换行和更换段落的区别)\n\n接下来是 粗体 与 斜体,至于又是粗体又是斜体,聪明的你应该已经猜到相应的语法了吧\n **粗体**\n*斜体*\n\n tips： 我现在的Markdown写的看起来非常的丑，但是估计之后会越写越好看，毕竟这是一个学习的过程。\n\n引用：\n\n\n\n\n\n\n\n\n\n今天真是他妈的学习的好日子，我终于可以狗娘养的学一天了 ————SomeoneSerious 2022.11.6\n &gt;引用，就这样写就可以了\n\n 注意我现在还不会引用缩进以及其他格式\n\n引用嵌套：\n\n\n\n\n\n\n\n\n\n这是一个父级引用\n\n这是一个子集引用\n\n &gt;这是一个父级引用\n&gt;&gt;这是一个子集引用\n\n 至于怎么让子级引用退回父级引用，我还不会。真tmd\n\n无序列表：\n 写到这里了，突然想放歌，至于我的博客为什么写的这么意识流，大概是因为没人看所以可以随心所欲吧。\n 大概效果是这样的\n\n我不知道该写点啥\n我还是不知道\n无所谓了\n换行\n牛不牛\n还能继续\n\n\n\n\n\n 这个地方的代码展示还有点困难。但是我会了(两个小时之后的我).\n * 我不知道该写点啥\n* 我还是不知道\n* 无所谓了\n    * 换行\n    * 牛不牛\n        * 还能继续\n\n代码块\n\n创建代码块就是通过搞四个空格就可以了（用软件的话一个tab &#x3D; 四个空格)  \n还可以使用围栏式的方法：\n\n 这是效果\n\n &#96;&#96;&#96;\n这是代码\n\\&#96;&#96;&#96;  没有前面的&quot;\\&quot;\n\n\n用 **`** 包围起来变量名或者其他代码名字，可以更加凸显，效果: createIdot()\n如果想用语法高亮的话，要再```后面加上这段语言的名字，试一下效果\n\n &#123;\n&#x2F;&#x2F; &#96;&#96;&#96;json\n&#x2F;&#x2F; code\n&#x2F;&#x2F; &#96;&#96;&#96;\n\n&#x2F;&#x2F; 这是我随便抄来的一段没有什么意义的代码，就是为了看看高亮。（被窝里看夜光手表）\n&quot;name&quot;: &quot;hexo-site&quot;,\n&quot;version&quot;: &quot;0.0.0&quot;,\n&quot;lockfileVersion&quot;: 2,\n&quot;requires&quot;: true,\n&#125;\n\n分割线\n\n就是通过使用***，就可以了\n\n\n\n上面就是一条分割线   \n\n 刚才改了一下中文输入时仍然用英文标点,不然实在是切换来切换去太麻烦了,\n\n超链接语法\n\n我觉得发明这种语言的人是一个天才, 在大家都追求个性的时候,通过这种单调的语言和单调的格式, 强行大大化减了办公难度, 我觉得这会成为一种趋势, (逗号后面得跟一个空格了, 因为现在在使用英文标点, tmd).就是现在一切都变得非常复杂, 就是为了应对人们刁钻的需求, 可是那些按钮大部分人一辈子也不会点一次, 但是缺经常能看到, 这是一件非常折磨的事情, 所以应该做一种应用定制, 而不是吃需求的大锅饭. 开发一款平台, 招募一大堆写脚本的程序员, 提出需求, 私人订制应用, 和跳蚤市场一样, 当人们有钱的时候, 这应该会是一个大市场.\n\n[超链接语法](https:&#x2F;&#x2F;markdown.com.cn)\n[Markdown语法](https:&#x2F;&#x2F;markdown.com.cn &quot;最好的markdown教程&quot;)。&#x2F;&#x2F;说实话, 这个 最好的教程 说的多少有点不要face.   \n\n\n效果Markdown语法感觉没p用\n其他\n\n&lt;尖括号里面写地址就是可以点的链接, 但是得写全&gt;\n\nhttps://www.baidu.com\n链接加粗加斜都是可以的, 还可以用 ` 加成标记code\n[&#96;code&#96;](&quot;https:&#x2F;&#x2F;www.baidu.com&quot;)\n[&#96;code&#96;](#code)\n\n睡觉去了, 睡半个小时起来再写.\n\n\n","slug":"mark/Markdown-Study-day-01","date":"2022-11-06T13:23:19.000Z","categories_index":"Study","tags_index":"Markdown","author_index":"Someone Serious"},{"id":"b9663f58f18133b35bfe243f3e916a80","title":"Hello World","content":"Welcome to Hexo!\n\nclick there to know more\n this is my First blog, if you are here, it’s a pretty weired thing, because I never introduce people to this article, But if you find this, I will give you a gift. How to get it?\nCall me 叶良辰, you will get it.\n\n\nQuick StartCreate a new post$ hexo new &quot;My New Post&quot;\n\nMore info: Writing\nRun server$ hexo server\n\nMore info: Server\nGenerate static files$ hexo generate\n\nMore info: Generating\nDeploy to remote sites$ hexo deploy\n\nMore info: Deployment\n","slug":"hello-world","date":"2022-11-06T12:27:47.711Z","categories_index":"","tags_index":"","author_index":"Someone Serious"}]